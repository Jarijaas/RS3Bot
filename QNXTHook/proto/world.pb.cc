// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "world.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* IdRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IdRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CursorActionMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CursorActionMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterfaceOpenMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterfaceOpenMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoolResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoolResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* InventoryTypeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InventoryTypeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Widget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Widget_reflection_ = NULL;
const ::google::protobuf::Descriptor* PropertyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PropertyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityRequest_reflection_ = NULL;
struct EntityRequestOneofInstance {
  ::google::protobuf::uint32 id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
}* EntityRequest_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* UIAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UIAction_reflection_ = NULL;
struct UIActionOneofInstance {
  ::google::protobuf::uint32 optionid_;
  ::google::protobuf::internal::ArenaStringPtr optiontext_;
}* UIAction_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ItemAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* Empty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Empty_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Entity_MovementType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InteractRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InteractRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntitiesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntitiesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Location_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Location_reflection_ = NULL;
const ::google::protobuf::Descriptor* Inventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Inventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Inventory_InventoryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Inventory_InventoryItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PropertyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UIWidgetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EntityType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_world_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_world_2eproto() {
  protobuf_AddDesc_world_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "world.proto");
  GOOGLE_CHECK(file != NULL);
  IdRequest_descriptor_ = file->message_type(0);
  static const int IdRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdRequest, id_),
  };
  IdRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IdRequest_descriptor_,
      IdRequest::default_instance_,
      IdRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(IdRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IdRequest, _is_default_instance_));
  CursorActionMessage_descriptor_ = file->message_type(1);
  static const int CursorActionMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CursorActionMessage, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CursorActionMessage, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CursorActionMessage, param3_),
  };
  CursorActionMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CursorActionMessage_descriptor_,
      CursorActionMessage::default_instance_,
      CursorActionMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(CursorActionMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CursorActionMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CursorActionMessage, _is_default_instance_));
  ChatMessage_descriptor_ = file->message_type(2);
  static const int ChatMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, content_),
  };
  ChatMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatMessage_descriptor_,
      ChatMessage::default_instance_,
      ChatMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChatMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatMessage, _is_default_instance_));
  InterfaceOpenMessage_descriptor_ = file->message_type(3);
  static const int InterfaceOpenMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfaceOpenMessage, interfaceid_),
  };
  InterfaceOpenMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InterfaceOpenMessage_descriptor_,
      InterfaceOpenMessage::default_instance_,
      InterfaceOpenMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(InterfaceOpenMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfaceOpenMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfaceOpenMessage, _is_default_instance_));
  BoolResponse_descriptor_ = file->message_type(4);
  static const int BoolResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolResponse, value_),
  };
  BoolResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BoolResponse_descriptor_,
      BoolResponse::default_instance_,
      BoolResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BoolResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoolResponse, _is_default_instance_));
  InventoryTypeRequest_descriptor_ = file->message_type(5);
  static const int InventoryTypeRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryTypeRequest, type_),
  };
  InventoryTypeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InventoryTypeRequest_descriptor_,
      InventoryTypeRequest::default_instance_,
      InventoryTypeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(InventoryTypeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryTypeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InventoryTypeRequest, _is_default_instance_));
  Widget_descriptor_ = file->message_type(6);
  static const int Widget_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, widgetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, hovertext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, options_),
  };
  Widget_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Widget_descriptor_,
      Widget::default_instance_,
      Widget_offsets_,
      -1,
      -1,
      -1,
      sizeof(Widget),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Widget, _is_default_instance_));
  PropertyValue_descriptor_ = file->message_type(7);
  static const int PropertyValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValue, value_),
  };
  PropertyValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PropertyValue_descriptor_,
      PropertyValue::default_instance_,
      PropertyValue_offsets_,
      -1,
      -1,
      -1,
      sizeof(PropertyValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValue, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PropertyValue, _is_default_instance_));
  EntityRequest_descriptor_ = file->message_type(8);
  static const int EntityRequest_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(EntityRequest_default_oneof_instance_, id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(EntityRequest_default_oneof_instance_, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, identifier_),
  };
  EntityRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntityRequest_descriptor_,
      EntityRequest::default_instance_,
      EntityRequest_offsets_,
      -1,
      -1,
      -1,
      EntityRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, _oneof_case_[0]),
      sizeof(EntityRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityRequest, _is_default_instance_));
  UIAction_descriptor_ = file->message_type(9);
  static const int UIAction_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(UIAction_default_oneof_instance_, optionid_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(UIAction_default_oneof_instance_, optiontext_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIAction, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIAction, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIAction, option_),
  };
  UIAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UIAction_descriptor_,
      UIAction::default_instance_,
      UIAction_offsets_,
      -1,
      -1,
      -1,
      UIAction_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIAction, _oneof_case_[0]),
      sizeof(UIAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UIAction, _is_default_instance_));
  ItemAction_descriptor_ = file->message_type(10);
  static const int ItemAction_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAction, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAction, option_),
  };
  ItemAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemAction_descriptor_,
      ItemAction::default_instance_,
      ItemAction_offsets_,
      -1,
      -1,
      -1,
      sizeof(ItemAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemAction, _is_default_instance_));
  Empty_descriptor_ = file->message_type(11);
  static const int Empty_offsets_[1] = {
  };
  Empty_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Empty_descriptor_,
      Empty::default_instance_,
      Empty_offsets_,
      -1,
      -1,
      -1,
      sizeof(Empty),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Empty, _is_default_instance_));
  Entity_descriptor_ = file->message_type(12);
  static const int Entity_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, max_health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, is_interacting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, mov_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, action_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, is_controlled_),
  };
  Entity_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entity_descriptor_,
      Entity::default_instance_,
      Entity_offsets_,
      -1,
      -1,
      -1,
      sizeof(Entity),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _is_default_instance_));
  Entity_MovementType_descriptor_ = Entity_descriptor_->enum_type(0);
  InteractRequest_descriptor_ = file->message_type(13);
  static const int InteractRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractRequest, entity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractRequest, option_),
  };
  InteractRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InteractRequest_descriptor_,
      InteractRequest::default_instance_,
      InteractRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(InteractRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractRequest, _is_default_instance_));
  EntitiesResponse_descriptor_ = file->message_type(14);
  static const int EntitiesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitiesResponse, entities_),
  };
  EntitiesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EntitiesResponse_descriptor_,
      EntitiesResponse::default_instance_,
      EntitiesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(EntitiesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitiesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitiesResponse, _is_default_instance_));
  Location_descriptor_ = file->message_type(15);
  static const int Location_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, tile_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, tile_y_),
  };
  Location_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Location_descriptor_,
      Location::default_instance_,
      Location_offsets_,
      -1,
      -1,
      -1,
      sizeof(Location),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _is_default_instance_));
  Inventory_descriptor_ = file->message_type(16);
  static const int Inventory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, items_),
  };
  Inventory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Inventory_descriptor_,
      Inventory::default_instance_,
      Inventory_offsets_,
      -1,
      -1,
      -1,
      sizeof(Inventory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, _is_default_instance_));
  Inventory_InventoryItem_descriptor_ = Inventory_descriptor_->nested_type(0);
  static const int Inventory_InventoryItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_InventoryItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_InventoryItem, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_InventoryItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_InventoryItem, slot_),
  };
  Inventory_InventoryItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Inventory_InventoryItem_descriptor_,
      Inventory_InventoryItem::default_instance_,
      Inventory_InventoryItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(Inventory_InventoryItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_InventoryItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_InventoryItem, _is_default_instance_));
  PropertyType_descriptor_ = file->enum_type(0);
  UIWidgetType_descriptor_ = file->enum_type(1);
  EntityType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_world_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IdRequest_descriptor_, &IdRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CursorActionMessage_descriptor_, &CursorActionMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatMessage_descriptor_, &ChatMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InterfaceOpenMessage_descriptor_, &InterfaceOpenMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BoolResponse_descriptor_, &BoolResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InventoryTypeRequest_descriptor_, &InventoryTypeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Widget_descriptor_, &Widget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PropertyValue_descriptor_, &PropertyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntityRequest_descriptor_, &EntityRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UIAction_descriptor_, &UIAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemAction_descriptor_, &ItemAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Empty_descriptor_, &Empty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entity_descriptor_, &Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InteractRequest_descriptor_, &InteractRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EntitiesResponse_descriptor_, &EntitiesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Location_descriptor_, &Location::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Inventory_descriptor_, &Inventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Inventory_InventoryItem_descriptor_, &Inventory_InventoryItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_world_2eproto() {
  delete IdRequest::default_instance_;
  delete IdRequest_reflection_;
  delete CursorActionMessage::default_instance_;
  delete CursorActionMessage_reflection_;
  delete ChatMessage::default_instance_;
  delete ChatMessage_reflection_;
  delete InterfaceOpenMessage::default_instance_;
  delete InterfaceOpenMessage_reflection_;
  delete BoolResponse::default_instance_;
  delete BoolResponse_reflection_;
  delete InventoryTypeRequest::default_instance_;
  delete InventoryTypeRequest_reflection_;
  delete Widget::default_instance_;
  delete Widget_reflection_;
  delete PropertyValue::default_instance_;
  delete PropertyValue_reflection_;
  delete EntityRequest::default_instance_;
  delete EntityRequest_default_oneof_instance_;
  delete EntityRequest_reflection_;
  delete UIAction::default_instance_;
  delete UIAction_default_oneof_instance_;
  delete UIAction_reflection_;
  delete ItemAction::default_instance_;
  delete ItemAction_reflection_;
  delete Empty::default_instance_;
  delete Empty_reflection_;
  delete Entity::default_instance_;
  delete Entity_reflection_;
  delete InteractRequest::default_instance_;
  delete InteractRequest_reflection_;
  delete EntitiesResponse::default_instance_;
  delete EntitiesResponse_reflection_;
  delete Location::default_instance_;
  delete Location_reflection_;
  delete Inventory::default_instance_;
  delete Inventory_reflection_;
  delete Inventory_InventoryItem::default_instance_;
  delete Inventory_InventoryItem_reflection_;
}

void protobuf_AddDesc_world_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_world_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013world.proto\"\027\n\tIdRequest\022\n\n\002id\030\001 \001(\r\"E"
    "\n\023CursorActionMessage\022\016\n\006param1\030\001 \001(\005\022\016\n"
    "\006param2\030\002 \001(\005\022\016\n\006param3\030\003 \001(\005\",\n\013ChatMes"
    "sage\022\014\n\004type\030\001 \001(\r\022\017\n\007content\030\002 \001(\t\"+\n\024I"
    "nterfaceOpenMessage\022\023\n\013interfaceId\030\001 \001(\r"
    "\"\035\n\014BoolResponse\022\r\n\005value\030\001 \001(\010\"$\n\024Inven"
    "toryTypeRequest\022\014\n\004type\030\001 \001(\r\"L\n\006Widget\022"
    "\020\n\010widgetId\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\021\n\thover"
    "Text\030\003 \001(\t\022\017\n\007options\030\004 \003(\t\"\036\n\rPropertyV"
    "alue\022\r\n\005value\030\001 \001(\r\";\n\rEntityRequest\022\014\n\002"
    "id\030\001 \001(\rH\000\022\016\n\004name\030\002 \001(\tH\000B\014\n\nidentifier"
    "\"i\n\010UIAction\022\022\n\010optionId\030\001 \001(\rH\000\022\024\n\nopti"
    "onText\030\002 \001(\tH\000\022\016\n\006param2\030\003 \001(\005\022\031\n\002id\030\004 \001"
    "(\0162\r.UIWidgetTypeB\010\n\006option\"*\n\nItemActio"
    "n\022\014\n\004slot\030\001 \001(\r\022\016\n\006option\030\002 \001(\t\"\007\n\005Empty"
    "\"\300\002\n\006Entity\022\n\n\002id\030\001 \001(\r\022\031\n\004type\030\002 \001(\0162\013."
    "EntityType\022\014\n\004name\030\003 \001(\t\022\033\n\010location\030\004 \001"
    "(\0132\t.Location\022\016\n\006health\030\005 \001(\005\022\022\n\nmax_hea"
    "lth\030\006 \001(\005\022\r\n\005level\030\007 \001(\005\022\026\n\016is_interacti"
    "ng\030\010 \001(\010\022&\n\010mov_type\030\t \001(\0162\024.Entity.Move"
    "mentType\022\021\n\taction_id\030\n \001(\r\022\017\n\007options\030\013"
    " \003(\t\022\025\n\ris_controlled\030\014 \001(\010\"6\n\014MovementT"
    "ype\022\014\n\010Standing\020\000\022\013\n\007Walking\020\002\022\013\n\007Runnin"
    "g\020\003\":\n\017InteractRequest\022\027\n\006entity\030\001 \001(\0132\007"
    ".Entity\022\016\n\006option\030\002 \001(\t\"-\n\020EntitiesRespo"
    "nse\022\031\n\010entities\030\001 \003(\0132\007.Entity\"*\n\010Locati"
    "on\022\016\n\006tile_x\030\001 \001(\005\022\016\n\006tile_y\030\002 \001(\005\"\177\n\tIn"
    "ventory\022\'\n\005items\030\001 \003(\0132\030.Inventory.Inven"
    "toryItem\032I\n\rInventoryItem\022\n\n\002id\030\001 \001(\005\022\020\n"
    "\010quantity\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\022\014\n\004slot\030\004 "
    "\001(\005*4\n\014PropertyType\022\027\n\023UnknownPropertyTy"
    "pe\020\000\022\013\n\006Health\020\223\005*\271\r\n\014UIWidgetType\022\021\n\rUn"
    "knownWidget\020\000\022\027\n\020BankWithdrawItem\020\340\201\350\027\022\026"
    "\n\017BankDepositItem\020\233\200\350\027\022\021\n\nBankTabAll\020\200\201\350"
    "\027\022\017\n\010BankTab2\020\210\201\350\027\022\017\n\010BankTab3\020\220\201\350\027\022\017\n\010B"
    "ankTab4\020\230\201\350\027\022\017\n\010BankTab5\020\240\201\350\027\022\017\n\010BankTab"
    "6\020\250\201\350\027\022\017\n\010BankTab7\020\260\201\350\027\022\017\n\010BankTab8\020\270\201\350\027"
    "\022\017\n\010BankTab9\020\300\201\350\027\022\025\n\016LobbySelectTab\020\342\200\250\034"
    "\022\023\n\014LobbyPlayNow\020\203\201\250\034\022\022\n\013SelectWorld\020\321\200\270"
    "\034\022\025\n\016ChatOptionNext\020\217\200\200%\022\022\n\013ChatOption1\020"
    "\205\200\220%\022\022\n\013ChatOption2\020\212\200\220%\022\022\n\013ChatOption3\020"
    "\217\200\220%\022\022\n\013ChatOption4\020\224\200\220%\022\022\n\013ChatOption5\020"
    "\231\200\220%\022\021\n\nRegenerate\020\213\200\330,\022\020\n\tRetaliate\020\267\200\330"
    ",\022\023\n\014QuickPrayers\020\220\200\330,\022$\n\035FollowerSelect"
    "LeftClickOption\020\227\200\330,\022\025\n\016FollowerAttack\020\235"
    "\200\330,\022\027\n\020InteractFollower\020\236\200\330,\022\026\n\017DismissF"
    "ollower\020\255\200\330,\022\023\n\014CallFollower\020\256\200\330,\022\020\n\tSum"
    "monPet\020\261\200\330,\022\021\n\nSkillsItem\020\207\200\350-\022\017\n\010WorldM"
    "ap\020\211\200\344-\022\020\n\tRunEnergy\020\213\200\344-\022\023\n\014HomeTelepor"
    "t\020\222\200\344-\022\016\n\007Compass\020\202\200\374;\022\023\n\014BackpackItem\020\205"
    "\200\204.\022\021\n\nDepositAll\020\333\200\350\027\022\023\n\rDepositAllBox\020"
    "\213\200,\022\021\n\nActionBar1\020\377\201\330,\022\021\n\nActionBar2\020\200\202\330"
    ",\022\021\n\nActionBar3\020\201\202\330,\022\021\n\nActionBar4\020\202\202\330,\022"
    "\025\n\016ActionBarSlot1\020\276\200\330,\022\025\n\016ActionBarSlot2"
    "\020\313\200\330,\022\025\n\016ActionBarSlot3\020\330\200\330,\022\025\n\016ActionBa"
    "rSlot4\020\345\200\330,\022\025\n\016ActionBarSlot5\020\362\200\330,\022\025\n\016Ac"
    "tionBarSlot6\020\377\200\330,\022\025\n\016ActionBarSlot7\020\214\201\330,"
    "\022\025\n\016ActionBarSlot8\020\231\201\330,\022\025\n\016ActionBarSlot"
    "9\020\246\201\330,\022\026\n\017ActionBarSlot10\020\263\201\330,\022\026\n\017Action"
    "BarSlot11\020\300\201\330,\022\026\n\017ActionBarSlot12\020\315\201\330,\022\026"
    "\n\017ActionBarSlot13\020\332\201\330,\022\026\n\017ActionBarSlot1"
    "4\020\347\201\330,\022\026\n\017ActionBarSlot15\020\364\201\330,\022\017\n\010Settin"
    "gs\020\267\200\344,\022\022\n\013ExitToLobby\020\277\200\344,\022\027\n\020ChatEnter"
    "Message\020\312\200\244\004\022\021\n\nBanditCamp\020\210\200\220\"\022\020\n\tLunar"
    "Isle\020\211\200\220\"\022\017\n\010AlKharid\020\212\200\220\"\022\017\n\010Ardougne\020\213"
    "\200\220\"\022\020\n\tBurthorpe\020\214\200\220\"\022\017\n\010Catherby\020\215\200\220\"\022\025"
    "\n\016DraynorVillage\020\216\200\220\"\022\020\n\tEdgeville\020\217\200\220\"\022"
    "\016\n\007Falador\020\220\200\220\"\022\021\n\nLumbdridge\020\221\200\220\"\022\020\n\tPo"
    "rtSarim\020\222\200\220\"\022\023\n\014SeersVillage\020\223\200\220\"\022\017\n\010Tav"
    "erley\020\224\200\220\"\022\016\n\007Varrock\020\225\200\220\"\022\017\n\010Menaphos\020\226"
    "\200\220\"\022\016\n\007Yanille\020\227\200\220\"\022\016\n\007Canifis\020\230\200\220\"\022\021\n\nE"
    "aglesPeak\020\231\200\220\"\022\030\n\021FremennikProvince\020\232\200\220\""
    "\022\016\n\007Karamja\020\233\200\220\"\022\r\n\006Ooglog\020\234\200\220\"\022\016\n\007Tiran"
    "nw\020\235\200\220\"\022\021\n\nWilderness\020\236\200\220\"\022\016\n\007Ashdale\020\237\200"
    "\220\"\022\021\n\nPriffdinas\020\240\200\220\"*J\n\nEntityType\022\n\n\006O"
    "bject\020\000\022\007\n\003NPC\020\001\022\n\n\006Player\020\002\022\016\n\nGroundIt"
    "em\020\003\022\013\n\007Object2\020\0142\366\004\n\003RS3\0223\n\014FindEntitie"
    "s\022\016.EntityRequest\032\021.EntitiesResponse\"\000\022&"
    "\n\010Interact\022\020.InteractRequest\032\006.Empty\"\000\022\035"
    "\n\006MoveTo\022\t.Location\032\006.Empty\"\000\0223\n\014GetInve"
    "ntory\022\025.InventoryTypeRequest\032\n.Inventory"
    "\"\000\022!\n\nDoUIAction\022\t.UIAction\032\006.Empty\"\000\022,\n"
    "\025DoItemInterfaceAction\022\t.UIAction\032\006.Empt"
    "y\"\000\022+\n\022BackpackItemAction\022\013.ItemAction\032\006"
    ".Empty\"\000\022+\n\013GetProperty\022\n.IdRequest\032\016.Pr"
    "opertyValue\"\000\0220\n\021IsUIWidgetVisible\022\n.IdR"
    "equest\032\r.BoolResponse\"\000\022(\n\023GetControlled"
    "Player\022\006.Empty\032\007.Entity\"\000\022\"\n\tGetWidget\022\n"
    ".IdRequest\032\007.Widget\"\000\022)\n\rOnChatMessage\022\006"
    ".Empty\032\014.ChatMessage\"\0000\001\0222\n\016OnCursorActi"
    "on\022\006.Empty\032\024.CursorActionMessage\"\0000\001\0224\n\017"
    "OnInterfaceOpen\022\006.Empty\032\025.InterfaceOpenM"
    "essage\"\0000\001b\006proto3", 3698);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "world.proto", &protobuf_RegisterTypes);
  IdRequest::default_instance_ = new IdRequest();
  CursorActionMessage::default_instance_ = new CursorActionMessage();
  ChatMessage::default_instance_ = new ChatMessage();
  InterfaceOpenMessage::default_instance_ = new InterfaceOpenMessage();
  BoolResponse::default_instance_ = new BoolResponse();
  InventoryTypeRequest::default_instance_ = new InventoryTypeRequest();
  Widget::default_instance_ = new Widget();
  PropertyValue::default_instance_ = new PropertyValue();
  EntityRequest::default_instance_ = new EntityRequest();
  EntityRequest_default_oneof_instance_ = new EntityRequestOneofInstance();
  UIAction::default_instance_ = new UIAction();
  UIAction_default_oneof_instance_ = new UIActionOneofInstance();
  ItemAction::default_instance_ = new ItemAction();
  Empty::default_instance_ = new Empty();
  Entity::default_instance_ = new Entity();
  InteractRequest::default_instance_ = new InteractRequest();
  EntitiesResponse::default_instance_ = new EntitiesResponse();
  Location::default_instance_ = new Location();
  Inventory::default_instance_ = new Inventory();
  Inventory_InventoryItem::default_instance_ = new Inventory_InventoryItem();
  IdRequest::default_instance_->InitAsDefaultInstance();
  CursorActionMessage::default_instance_->InitAsDefaultInstance();
  ChatMessage::default_instance_->InitAsDefaultInstance();
  InterfaceOpenMessage::default_instance_->InitAsDefaultInstance();
  BoolResponse::default_instance_->InitAsDefaultInstance();
  InventoryTypeRequest::default_instance_->InitAsDefaultInstance();
  Widget::default_instance_->InitAsDefaultInstance();
  PropertyValue::default_instance_->InitAsDefaultInstance();
  EntityRequest::default_instance_->InitAsDefaultInstance();
  UIAction::default_instance_->InitAsDefaultInstance();
  ItemAction::default_instance_->InitAsDefaultInstance();
  Empty::default_instance_->InitAsDefaultInstance();
  Entity::default_instance_->InitAsDefaultInstance();
  InteractRequest::default_instance_->InitAsDefaultInstance();
  EntitiesResponse::default_instance_->InitAsDefaultInstance();
  Location::default_instance_->InitAsDefaultInstance();
  Inventory::default_instance_->InitAsDefaultInstance();
  Inventory_InventoryItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_world_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_world_2eproto {
  StaticDescriptorInitializer_world_2eproto() {
    protobuf_AddDesc_world_2eproto();
  }
} static_descriptor_initializer_world_2eproto_;
const ::google::protobuf::EnumDescriptor* PropertyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyType_descriptor_;
}
bool PropertyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 659:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UIWidgetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIWidgetType_descriptor_;
}
bool UIWidgetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 720907:
    case 8978506:
    case 49938459:
    case 49938523:
    case 49938560:
    case 49938568:
    case 49938576:
    case 49938584:
    case 49938592:
    case 49938600:
    case 49938608:
    case 49938616:
    case 49938624:
    case 49938656:
    case 59375714:
    case 59375747:
    case 59637841:
    case 71565320:
    case 71565321:
    case 71565322:
    case 71565323:
    case 71565324:
    case 71565325:
    case 71565326:
    case 71565327:
    case 71565328:
    case 71565329:
    case 71565330:
    case 71565331:
    case 71565332:
    case 71565333:
    case 71565334:
    case 71565335:
    case 71565336:
    case 71565337:
    case 71565338:
    case 71565339:
    case 71565340:
    case 71565341:
    case 71565342:
    case 71565343:
    case 71565344:
    case 77594639:
    case 77856773:
    case 77856778:
    case 77856783:
    case 77856788:
    case 77856793:
    case 93716491:
    case 93716496:
    case 93716503:
    case 93716509:
    case 93716510:
    case 93716525:
    case 93716526:
    case 93716529:
    case 93716535:
    case 93716542:
    case 93716555:
    case 93716568:
    case 93716581:
    case 93716594:
    case 93716607:
    case 93716620:
    case 93716633:
    case 93716646:
    case 93716659:
    case 93716672:
    case 93716685:
    case 93716698:
    case 93716711:
    case 93716724:
    case 93716735:
    case 93716736:
    case 93716737:
    case 93716738:
    case 93913143:
    case 93913151:
    case 96010249:
    case 96010251:
    case 96010258:
    case 96075783:
    case 96534533:
    case 125763586:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EntityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityType_descriptor_;
}
bool EntityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IdRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IdRequest::IdRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IdRequest)
}

void IdRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

IdRequest::IdRequest(const IdRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IdRequest)
}

void IdRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = 0u;
}

IdRequest::~IdRequest() {
  // @@protoc_insertion_point(destructor:IdRequest)
  SharedDtor();
}

void IdRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IdRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IdRequest_descriptor_;
}

const IdRequest& IdRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

IdRequest* IdRequest::default_instance_ = NULL;

IdRequest* IdRequest::New(::google::protobuf::Arena* arena) const {
  IdRequest* n = new IdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IdRequest)
  id_ = 0u;
}

bool IdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IdRequest)
  return false;
#undef DO_
}

void IdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IdRequest)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:IdRequest)
}

::google::protobuf::uint8* IdRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IdRequest)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:IdRequest)
  return target;
}

int IdRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:IdRequest)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IdRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IdRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IdRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IdRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IdRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IdRequest)
    MergeFrom(*source);
  }
}

void IdRequest::MergeFrom(const IdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IdRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void IdRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdRequest::CopyFrom(const IdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdRequest::IsInitialized() const {

  return true;
}

void IdRequest::Swap(IdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IdRequest::InternalSwap(IdRequest* other) {
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IdRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IdRequest_descriptor_;
  metadata.reflection = IdRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IdRequest

// optional uint32 id = 1;
void IdRequest::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 IdRequest::id() const {
  // @@protoc_insertion_point(field_get:IdRequest.id)
  return id_;
}
 void IdRequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:IdRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CursorActionMessage::kParam1FieldNumber;
const int CursorActionMessage::kParam2FieldNumber;
const int CursorActionMessage::kParam3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CursorActionMessage::CursorActionMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CursorActionMessage)
}

void CursorActionMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CursorActionMessage::CursorActionMessage(const CursorActionMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CursorActionMessage)
}

void CursorActionMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  param1_ = 0;
  param2_ = 0;
  param3_ = 0;
}

CursorActionMessage::~CursorActionMessage() {
  // @@protoc_insertion_point(destructor:CursorActionMessage)
  SharedDtor();
}

void CursorActionMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CursorActionMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CursorActionMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CursorActionMessage_descriptor_;
}

const CursorActionMessage& CursorActionMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

CursorActionMessage* CursorActionMessage::default_instance_ = NULL;

CursorActionMessage* CursorActionMessage::New(::google::protobuf::Arena* arena) const {
  CursorActionMessage* n = new CursorActionMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CursorActionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CursorActionMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CursorActionMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CursorActionMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(param1_, param3_);

#undef ZR_HELPER_
#undef ZR_

}

bool CursorActionMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CursorActionMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 param1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param2;
        break;
      }

      // optional int32 param2 = 2;
      case 2: {
        if (tag == 16) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_param3;
        break;
      }

      // optional int32 param3 = 3;
      case 3: {
        if (tag == 24) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param3_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CursorActionMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CursorActionMessage)
  return false;
#undef DO_
}

void CursorActionMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CursorActionMessage)
  // optional int32 param1 = 1;
  if (this->param1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param1(), output);
  }

  // optional int32 param2 = 2;
  if (this->param2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param2(), output);
  }

  // optional int32 param3 = 3;
  if (this->param3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param3(), output);
  }

  // @@protoc_insertion_point(serialize_end:CursorActionMessage)
}

::google::protobuf::uint8* CursorActionMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CursorActionMessage)
  // optional int32 param1 = 1;
  if (this->param1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param1(), target);
  }

  // optional int32 param2 = 2;
  if (this->param2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param2(), target);
  }

  // optional int32 param3 = 3;
  if (this->param3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param3(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CursorActionMessage)
  return target;
}

int CursorActionMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:CursorActionMessage)
  int total_size = 0;

  // optional int32 param1 = 1;
  if (this->param1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param1());
  }

  // optional int32 param2 = 2;
  if (this->param2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param2());
  }

  // optional int32 param3 = 3;
  if (this->param3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param3());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorActionMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CursorActionMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CursorActionMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CursorActionMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CursorActionMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CursorActionMessage)
    MergeFrom(*source);
  }
}

void CursorActionMessage::MergeFrom(const CursorActionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CursorActionMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.param1() != 0) {
    set_param1(from.param1());
  }
  if (from.param2() != 0) {
    set_param2(from.param2());
  }
  if (from.param3() != 0) {
    set_param3(from.param3());
  }
}

void CursorActionMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CursorActionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CursorActionMessage::CopyFrom(const CursorActionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CursorActionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorActionMessage::IsInitialized() const {

  return true;
}

void CursorActionMessage::Swap(CursorActionMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CursorActionMessage::InternalSwap(CursorActionMessage* other) {
  std::swap(param1_, other->param1_);
  std::swap(param2_, other->param2_);
  std::swap(param3_, other->param3_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CursorActionMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CursorActionMessage_descriptor_;
  metadata.reflection = CursorActionMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CursorActionMessage

// optional int32 param1 = 1;
void CursorActionMessage::clear_param1() {
  param1_ = 0;
}
 ::google::protobuf::int32 CursorActionMessage::param1() const {
  // @@protoc_insertion_point(field_get:CursorActionMessage.param1)
  return param1_;
}
 void CursorActionMessage::set_param1(::google::protobuf::int32 value) {
  
  param1_ = value;
  // @@protoc_insertion_point(field_set:CursorActionMessage.param1)
}

// optional int32 param2 = 2;
void CursorActionMessage::clear_param2() {
  param2_ = 0;
}
 ::google::protobuf::int32 CursorActionMessage::param2() const {
  // @@protoc_insertion_point(field_get:CursorActionMessage.param2)
  return param2_;
}
 void CursorActionMessage::set_param2(::google::protobuf::int32 value) {
  
  param2_ = value;
  // @@protoc_insertion_point(field_set:CursorActionMessage.param2)
}

// optional int32 param3 = 3;
void CursorActionMessage::clear_param3() {
  param3_ = 0;
}
 ::google::protobuf::int32 CursorActionMessage::param3() const {
  // @@protoc_insertion_point(field_get:CursorActionMessage.param3)
  return param3_;
}
 void CursorActionMessage::set_param3(::google::protobuf::int32 value) {
  
  param3_ = value;
  // @@protoc_insertion_point(field_set:CursorActionMessage.param3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatMessage::kTypeFieldNumber;
const int ChatMessage::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatMessage::ChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChatMessage)
}

void ChatMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChatMessage::ChatMessage(const ChatMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChatMessage)
}

void ChatMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0u;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:ChatMessage)
  SharedDtor();
}

void ChatMessage::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatMessage_descriptor_;
}

const ChatMessage& ChatMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

ChatMessage* ChatMessage::default_instance_ = NULL;

ChatMessage* ChatMessage::New(::google::protobuf::Arena* arena) const {
  ChatMessage* n = new ChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatMessage)
  type_ = 0u;
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChatMessage.content"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChatMessage)
  return false;
#undef DO_
}

void ChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChatMessage)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatMessage.content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:ChatMessage)
}

::google::protobuf::uint8* ChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatMessage)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChatMessage.content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ChatMessage)
  return target;
}

int ChatMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChatMessage)
  int total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // optional string content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChatMessage)
    MergeFrom(*source);
  }
}

void ChatMessage::MergeFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void ChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatMessage::IsInitialized() const {

  return true;
}

void ChatMessage::Swap(ChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatMessage::InternalSwap(ChatMessage* other) {
  std::swap(type_, other->type_);
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatMessage_descriptor_;
  metadata.reflection = ChatMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatMessage

// optional uint32 type = 1;
void ChatMessage::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 ChatMessage::type() const {
  // @@protoc_insertion_point(field_get:ChatMessage.type)
  return type_;
}
 void ChatMessage::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ChatMessage.type)
}

// optional string content = 2;
void ChatMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChatMessage::content() const {
  // @@protoc_insertion_point(field_get:ChatMessage.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChatMessage.content)
}
 void ChatMessage::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChatMessage.content)
}
 void ChatMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChatMessage.content)
}
 ::std::string* ChatMessage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:ChatMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatMessage::release_content() {
  // @@protoc_insertion_point(field_release:ChatMessage.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ChatMessage.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterfaceOpenMessage::kInterfaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterfaceOpenMessage::InterfaceOpenMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InterfaceOpenMessage)
}

void InterfaceOpenMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InterfaceOpenMessage::InterfaceOpenMessage(const InterfaceOpenMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InterfaceOpenMessage)
}

void InterfaceOpenMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  interfaceid_ = 0u;
}

InterfaceOpenMessage::~InterfaceOpenMessage() {
  // @@protoc_insertion_point(destructor:InterfaceOpenMessage)
  SharedDtor();
}

void InterfaceOpenMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InterfaceOpenMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterfaceOpenMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterfaceOpenMessage_descriptor_;
}

const InterfaceOpenMessage& InterfaceOpenMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

InterfaceOpenMessage* InterfaceOpenMessage::default_instance_ = NULL;

InterfaceOpenMessage* InterfaceOpenMessage::New(::google::protobuf::Arena* arena) const {
  InterfaceOpenMessage* n = new InterfaceOpenMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterfaceOpenMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InterfaceOpenMessage)
  interfaceid_ = 0u;
}

bool InterfaceOpenMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InterfaceOpenMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 interfaceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interfaceid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InterfaceOpenMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InterfaceOpenMessage)
  return false;
#undef DO_
}

void InterfaceOpenMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InterfaceOpenMessage)
  // optional uint32 interfaceId = 1;
  if (this->interfaceid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->interfaceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:InterfaceOpenMessage)
}

::google::protobuf::uint8* InterfaceOpenMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InterfaceOpenMessage)
  // optional uint32 interfaceId = 1;
  if (this->interfaceid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->interfaceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InterfaceOpenMessage)
  return target;
}

int InterfaceOpenMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InterfaceOpenMessage)
  int total_size = 0;

  // optional uint32 interfaceId = 1;
  if (this->interfaceid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interfaceid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterfaceOpenMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InterfaceOpenMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InterfaceOpenMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InterfaceOpenMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InterfaceOpenMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InterfaceOpenMessage)
    MergeFrom(*source);
  }
}

void InterfaceOpenMessage::MergeFrom(const InterfaceOpenMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InterfaceOpenMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.interfaceid() != 0) {
    set_interfaceid(from.interfaceid());
  }
}

void InterfaceOpenMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InterfaceOpenMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfaceOpenMessage::CopyFrom(const InterfaceOpenMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InterfaceOpenMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceOpenMessage::IsInitialized() const {

  return true;
}

void InterfaceOpenMessage::Swap(InterfaceOpenMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterfaceOpenMessage::InternalSwap(InterfaceOpenMessage* other) {
  std::swap(interfaceid_, other->interfaceid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterfaceOpenMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterfaceOpenMessage_descriptor_;
  metadata.reflection = InterfaceOpenMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterfaceOpenMessage

// optional uint32 interfaceId = 1;
void InterfaceOpenMessage::clear_interfaceid() {
  interfaceid_ = 0u;
}
 ::google::protobuf::uint32 InterfaceOpenMessage::interfaceid() const {
  // @@protoc_insertion_point(field_get:InterfaceOpenMessage.interfaceId)
  return interfaceid_;
}
 void InterfaceOpenMessage::set_interfaceid(::google::protobuf::uint32 value) {
  
  interfaceid_ = value;
  // @@protoc_insertion_point(field_set:InterfaceOpenMessage.interfaceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoolResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoolResponse::BoolResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BoolResponse)
}

void BoolResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BoolResponse::BoolResponse(const BoolResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BoolResponse)
}

void BoolResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = false;
}

BoolResponse::~BoolResponse() {
  // @@protoc_insertion_point(destructor:BoolResponse)
  SharedDtor();
}

void BoolResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoolResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoolResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoolResponse_descriptor_;
}

const BoolResponse& BoolResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

BoolResponse* BoolResponse::default_instance_ = NULL;

BoolResponse* BoolResponse::New(::google::protobuf::Arena* arena) const {
  BoolResponse* n = new BoolResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoolResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BoolResponse)
  value_ = false;
}

bool BoolResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BoolResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BoolResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BoolResponse)
  return false;
#undef DO_
}

void BoolResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BoolResponse)
  // optional bool value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:BoolResponse)
}

::google::protobuf::uint8* BoolResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BoolResponse)
  // optional bool value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BoolResponse)
  return target;
}

int BoolResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BoolResponse)
  int total_size = 0;

  // optional bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoolResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BoolResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BoolResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BoolResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BoolResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BoolResponse)
    MergeFrom(*source);
  }
}

void BoolResponse::MergeFrom(const BoolResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BoolResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void BoolResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoolResponse::CopyFrom(const BoolResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BoolResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoolResponse::IsInitialized() const {

  return true;
}

void BoolResponse::Swap(BoolResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoolResponse::InternalSwap(BoolResponse* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoolResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoolResponse_descriptor_;
  metadata.reflection = BoolResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BoolResponse

// optional bool value = 1;
void BoolResponse::clear_value() {
  value_ = false;
}
 bool BoolResponse::value() const {
  // @@protoc_insertion_point(field_get:BoolResponse.value)
  return value_;
}
 void BoolResponse::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:BoolResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InventoryTypeRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InventoryTypeRequest::InventoryTypeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InventoryTypeRequest)
}

void InventoryTypeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

InventoryTypeRequest::InventoryTypeRequest(const InventoryTypeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InventoryTypeRequest)
}

void InventoryTypeRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  type_ = 0u;
}

InventoryTypeRequest::~InventoryTypeRequest() {
  // @@protoc_insertion_point(destructor:InventoryTypeRequest)
  SharedDtor();
}

void InventoryTypeRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InventoryTypeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InventoryTypeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InventoryTypeRequest_descriptor_;
}

const InventoryTypeRequest& InventoryTypeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

InventoryTypeRequest* InventoryTypeRequest::default_instance_ = NULL;

InventoryTypeRequest* InventoryTypeRequest::New(::google::protobuf::Arena* arena) const {
  InventoryTypeRequest* n = new InventoryTypeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InventoryTypeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:InventoryTypeRequest)
  type_ = 0u;
}

bool InventoryTypeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InventoryTypeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InventoryTypeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InventoryTypeRequest)
  return false;
#undef DO_
}

void InventoryTypeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InventoryTypeRequest)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:InventoryTypeRequest)
}

::google::protobuf::uint8* InventoryTypeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InventoryTypeRequest)
  // optional uint32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InventoryTypeRequest)
  return target;
}

int InventoryTypeRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InventoryTypeRequest)
  int total_size = 0;

  // optional uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InventoryTypeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InventoryTypeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InventoryTypeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InventoryTypeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InventoryTypeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InventoryTypeRequest)
    MergeFrom(*source);
  }
}

void InventoryTypeRequest::MergeFrom(const InventoryTypeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InventoryTypeRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void InventoryTypeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InventoryTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InventoryTypeRequest::CopyFrom(const InventoryTypeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InventoryTypeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InventoryTypeRequest::IsInitialized() const {

  return true;
}

void InventoryTypeRequest::Swap(InventoryTypeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InventoryTypeRequest::InternalSwap(InventoryTypeRequest* other) {
  std::swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InventoryTypeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InventoryTypeRequest_descriptor_;
  metadata.reflection = InventoryTypeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InventoryTypeRequest

// optional uint32 type = 1;
void InventoryTypeRequest::clear_type() {
  type_ = 0u;
}
 ::google::protobuf::uint32 InventoryTypeRequest::type() const {
  // @@protoc_insertion_point(field_get:InventoryTypeRequest.type)
  return type_;
}
 void InventoryTypeRequest::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:InventoryTypeRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Widget::kWidgetIdFieldNumber;
const int Widget::kNameFieldNumber;
const int Widget::kHoverTextFieldNumber;
const int Widget::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Widget::Widget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Widget)
}

void Widget::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Widget::Widget(const Widget& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Widget)
}

void Widget::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  widgetid_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hovertext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Widget::~Widget() {
  // @@protoc_insertion_point(destructor:Widget)
  SharedDtor();
}

void Widget::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hovertext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Widget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Widget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Widget_descriptor_;
}

const Widget& Widget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

Widget* Widget::default_instance_ = NULL;

Widget* Widget::New(::google::protobuf::Arena* arena) const {
  Widget* n = new Widget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Widget::Clear() {
// @@protoc_insertion_point(message_clear_start:Widget)
  widgetid_ = 0u;
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hovertext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_.Clear();
}

bool Widget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Widget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 widgetId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &widgetid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Widget.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hoverText;
        break;
      }

      // optional string hoverText = 3;
      case 3: {
        if (tag == 26) {
         parse_hoverText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hovertext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hovertext().data(), this->hovertext().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Widget.hoverText"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_options;
        break;
      }

      // repeated string options = 4;
      case 4: {
        if (tag == 34) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_options()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->options(this->options_size() - 1).data(),
            this->options(this->options_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Widget.options"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_options;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Widget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Widget)
  return false;
#undef DO_
}

void Widget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Widget)
  // optional uint32 widgetId = 1;
  if (this->widgetid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->widgetid(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Widget.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string hoverText = 3;
  if (this->hovertext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hovertext().data(), this->hovertext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Widget.hoverText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hovertext(), output);
  }

  // repeated string options = 4;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->options(i).data(), this->options(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Widget.options");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->options(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Widget)
}

::google::protobuf::uint8* Widget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Widget)
  // optional uint32 widgetId = 1;
  if (this->widgetid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->widgetid(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Widget.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string hoverText = 3;
  if (this->hovertext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hovertext().data(), this->hovertext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Widget.hoverText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hovertext(), target);
  }

  // repeated string options = 4;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->options(i).data(), this->options(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Widget.options");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->options(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Widget)
  return target;
}

int Widget::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Widget)
  int total_size = 0;

  // optional uint32 widgetId = 1;
  if (this->widgetid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->widgetid());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string hoverText = 3;
  if (this->hovertext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hovertext());
  }

  // repeated string options = 4;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->options(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Widget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Widget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Widget* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Widget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Widget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Widget)
    MergeFrom(*source);
  }
}

void Widget::MergeFrom(const Widget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Widget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  options_.MergeFrom(from.options_);
  if (from.widgetid() != 0) {
    set_widgetid(from.widgetid());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.hovertext().size() > 0) {

    hovertext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hovertext_);
  }
}

void Widget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Widget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Widget::CopyFrom(const Widget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Widget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Widget::IsInitialized() const {

  return true;
}

void Widget::Swap(Widget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Widget::InternalSwap(Widget* other) {
  std::swap(widgetid_, other->widgetid_);
  name_.Swap(&other->name_);
  hovertext_.Swap(&other->hovertext_);
  options_.UnsafeArenaSwap(&other->options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Widget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Widget_descriptor_;
  metadata.reflection = Widget_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Widget

// optional uint32 widgetId = 1;
void Widget::clear_widgetid() {
  widgetid_ = 0u;
}
 ::google::protobuf::uint32 Widget::widgetid() const {
  // @@protoc_insertion_point(field_get:Widget.widgetId)
  return widgetid_;
}
 void Widget::set_widgetid(::google::protobuf::uint32 value) {
  
  widgetid_ = value;
  // @@protoc_insertion_point(field_set:Widget.widgetId)
}

// optional string name = 2;
void Widget::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Widget::name() const {
  // @@protoc_insertion_point(field_get:Widget.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Widget::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Widget.name)
}
 void Widget::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Widget.name)
}
 void Widget::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Widget.name)
}
 ::std::string* Widget::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Widget.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Widget::release_name() {
  // @@protoc_insertion_point(field_release:Widget.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Widget::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Widget.name)
}

// optional string hoverText = 3;
void Widget::clear_hovertext() {
  hovertext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Widget::hovertext() const {
  // @@protoc_insertion_point(field_get:Widget.hoverText)
  return hovertext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Widget::set_hovertext(const ::std::string& value) {
  
  hovertext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Widget.hoverText)
}
 void Widget::set_hovertext(const char* value) {
  
  hovertext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Widget.hoverText)
}
 void Widget::set_hovertext(const char* value, size_t size) {
  
  hovertext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Widget.hoverText)
}
 ::std::string* Widget::mutable_hovertext() {
  
  // @@protoc_insertion_point(field_mutable:Widget.hoverText)
  return hovertext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Widget::release_hovertext() {
  // @@protoc_insertion_point(field_release:Widget.hoverText)
  
  return hovertext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Widget::set_allocated_hovertext(::std::string* hovertext) {
  if (hovertext != NULL) {
    
  } else {
    
  }
  hovertext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hovertext);
  // @@protoc_insertion_point(field_set_allocated:Widget.hoverText)
}

// repeated string options = 4;
int Widget::options_size() const {
  return options_.size();
}
void Widget::clear_options() {
  options_.Clear();
}
 const ::std::string& Widget::options(int index) const {
  // @@protoc_insertion_point(field_get:Widget.options)
  return options_.Get(index);
}
 ::std::string* Widget::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:Widget.options)
  return options_.Mutable(index);
}
 void Widget::set_options(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Widget.options)
  options_.Mutable(index)->assign(value);
}
 void Widget::set_options(int index, const char* value) {
  options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Widget.options)
}
 void Widget::set_options(int index, const char* value, size_t size) {
  options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Widget.options)
}
 ::std::string* Widget::add_options() {
  // @@protoc_insertion_point(field_add_mutable:Widget.options)
  return options_.Add();
}
 void Widget::add_options(const ::std::string& value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Widget.options)
}
 void Widget::add_options(const char* value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Widget.options)
}
 void Widget::add_options(const char* value, size_t size) {
  options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Widget.options)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Widget::options() const {
  // @@protoc_insertion_point(field_list:Widget.options)
  return options_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Widget::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:Widget.options)
  return &options_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PropertyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PropertyValue::PropertyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PropertyValue)
}

void PropertyValue::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PropertyValue::PropertyValue(const PropertyValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:PropertyValue)
}

void PropertyValue::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0u;
}

PropertyValue::~PropertyValue() {
  // @@protoc_insertion_point(destructor:PropertyValue)
  SharedDtor();
}

void PropertyValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PropertyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PropertyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyValue_descriptor_;
}

const PropertyValue& PropertyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

PropertyValue* PropertyValue::default_instance_ = NULL;

PropertyValue* PropertyValue::New(::google::protobuf::Arena* arena) const {
  PropertyValue* n = new PropertyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PropertyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:PropertyValue)
  value_ = 0u;
}

bool PropertyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PropertyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PropertyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PropertyValue)
  return false;
#undef DO_
}

void PropertyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PropertyValue)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:PropertyValue)
}

::google::protobuf::uint8* PropertyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:PropertyValue)
  // optional uint32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:PropertyValue)
  return target;
}

int PropertyValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:PropertyValue)
  int total_size = 0;

  // optional uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PropertyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PropertyValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PropertyValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PropertyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PropertyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PropertyValue)
    MergeFrom(*source);
  }
}

void PropertyValue::MergeFrom(const PropertyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PropertyValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void PropertyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyValue::CopyFrom(const PropertyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PropertyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyValue::IsInitialized() const {

  return true;
}

void PropertyValue::Swap(PropertyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PropertyValue::InternalSwap(PropertyValue* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PropertyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PropertyValue_descriptor_;
  metadata.reflection = PropertyValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PropertyValue

// optional uint32 value = 1;
void PropertyValue::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 PropertyValue::value() const {
  // @@protoc_insertion_point(field_get:PropertyValue.value)
  return value_;
}
 void PropertyValue::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:PropertyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntityRequest::kIdFieldNumber;
const int EntityRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntityRequest::EntityRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EntityRequest)
}

void EntityRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  EntityRequest_default_oneof_instance_->id_ = 0u;
  EntityRequest_default_oneof_instance_->name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EntityRequest::EntityRequest(const EntityRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EntityRequest)
}

void EntityRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clear_has_identifier();
}

EntityRequest::~EntityRequest() {
  // @@protoc_insertion_point(destructor:EntityRequest)
  SharedDtor();
}

void EntityRequest::SharedDtor() {
  if (has_identifier()) {
    clear_identifier();
  }
  if (this != default_instance_) {
  }
}

void EntityRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityRequest_descriptor_;
}

const EntityRequest& EntityRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

EntityRequest* EntityRequest::default_instance_ = NULL;

EntityRequest* EntityRequest::New(::google::protobuf::Arena* arena) const {
  EntityRequest* n = new EntityRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntityRequest::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:EntityRequest)
  switch(identifier_case()) {
    case kId: {
      // No need to clear
      break;
    }
    case kName: {
      identifier_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void EntityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EntityRequest)
  clear_identifier();
}

bool EntityRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EntityRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          clear_identifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &identifier_.id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EntityRequest.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EntityRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EntityRequest)
  return false;
#undef DO_
}

void EntityRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EntityRequest)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EntityRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // @@protoc_insertion_point(serialize_end:EntityRequest)
}

::google::protobuf::uint8* EntityRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EntityRequest)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EntityRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:EntityRequest)
  return target;
}

int EntityRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EntityRequest)
  int total_size = 0;

  switch (identifier_case()) {
    // optional uint32 id = 1;
    case kId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
      break;
    }
    // optional string name = 2;
    case kName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EntityRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EntityRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EntityRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EntityRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EntityRequest)
    MergeFrom(*source);
  }
}

void EntityRequest::MergeFrom(const EntityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EntityRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.identifier_case()) {
    case kId: {
      set_id(from.id());
      break;
    }
    case kName: {
      set_name(from.name());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
}

void EntityRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EntityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityRequest::CopyFrom(const EntityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EntityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityRequest::IsInitialized() const {

  return true;
}

void EntityRequest::Swap(EntityRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntityRequest::InternalSwap(EntityRequest* other) {
  std::swap(identifier_, other->identifier_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntityRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityRequest_descriptor_;
  metadata.reflection = EntityRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntityRequest

// optional uint32 id = 1;
bool EntityRequest::has_id() const {
  return identifier_case() == kId;
}
void EntityRequest::set_has_id() {
  _oneof_case_[0] = kId;
}
void EntityRequest::clear_id() {
  if (has_id()) {
    identifier_.id_ = 0u;
    clear_has_identifier();
  }
}
 ::google::protobuf::uint32 EntityRequest::id() const {
  // @@protoc_insertion_point(field_get:EntityRequest.id)
  if (has_id()) {
    return identifier_.id_;
  }
  return 0u;
}
 void EntityRequest::set_id(::google::protobuf::uint32 value) {
  if (!has_id()) {
    clear_identifier();
    set_has_id();
  }
  identifier_.id_ = value;
  // @@protoc_insertion_point(field_set:EntityRequest.id)
}

// optional string name = 2;
bool EntityRequest::has_name() const {
  return identifier_case() == kName;
}
void EntityRequest::set_has_name() {
  _oneof_case_[0] = kName;
}
void EntityRequest::clear_name() {
  if (has_name()) {
    identifier_.name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_identifier();
  }
}
 const ::std::string& EntityRequest::name() const {
  // @@protoc_insertion_point(field_get:EntityRequest.name)
  if (has_name()) {
    return identifier_.name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void EntityRequest::set_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:EntityRequest.name)
  if (!has_name()) {
    clear_identifier();
    set_has_name();
    identifier_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:EntityRequest.name)
}
 void EntityRequest::set_name(const char* value) {
  if (!has_name()) {
    clear_identifier();
    set_has_name();
    identifier_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EntityRequest.name)
}
 void EntityRequest::set_name(const char* value, size_t size) {
  if (!has_name()) {
    clear_identifier();
    set_has_name();
    identifier_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  identifier_.name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EntityRequest.name)
}
 ::std::string* EntityRequest::mutable_name() {
  if (!has_name()) {
    clear_identifier();
    set_has_name();
    identifier_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:EntityRequest.name)
  return identifier_.name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EntityRequest::release_name() {
  // @@protoc_insertion_point(field_release:EntityRequest.name)
  if (has_name()) {
    clear_has_identifier();
    return identifier_.name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void EntityRequest::set_allocated_name(::std::string* name) {
  if (!has_name()) {
    identifier_.name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_identifier();
  if (name != NULL) {
    set_has_name();
    identifier_.name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        name);
  }
  // @@protoc_insertion_point(field_set_allocated:EntityRequest.name)
}

bool EntityRequest::has_identifier() const {
  return identifier_case() != IDENTIFIER_NOT_SET;
}
void EntityRequest::clear_has_identifier() {
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}
EntityRequest::IdentifierCase EntityRequest::identifier_case() const {
  return EntityRequest::IdentifierCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UIAction::kOptionIdFieldNumber;
const int UIAction::kOptionTextFieldNumber;
const int UIAction::kParam2FieldNumber;
const int UIAction::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UIAction::UIAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UIAction)
}

void UIAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  UIAction_default_oneof_instance_->optionid_ = 0u;
  UIAction_default_oneof_instance_->optiontext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UIAction::UIAction(const UIAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UIAction)
}

void UIAction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  param2_ = 0;
  id_ = 0;
  clear_has_option();
}

UIAction::~UIAction() {
  // @@protoc_insertion_point(destructor:UIAction)
  SharedDtor();
}

void UIAction::SharedDtor() {
  if (has_option()) {
    clear_option();
  }
  if (this != default_instance_) {
  }
}

void UIAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UIAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UIAction_descriptor_;
}

const UIAction& UIAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

UIAction* UIAction::default_instance_ = NULL;

UIAction* UIAction::New(::google::protobuf::Arena* arena) const {
  UIAction* n = new UIAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UIAction::clear_option() {
// @@protoc_insertion_point(one_of_clear_start:UIAction)
  switch(option_case()) {
    case kOptionId: {
      // No need to clear
      break;
    }
    case kOptionText: {
      option_.optiontext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTION_NOT_SET;
}


void UIAction::Clear() {
// @@protoc_insertion_point(message_clear_start:UIAction)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UIAction, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UIAction*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(param2_, id_);

#undef ZR_HELPER_
#undef ZR_

  clear_option();
}

bool UIAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UIAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 optionId = 1;
      case 1: {
        if (tag == 8) {
          clear_option();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_.optionid_)));
          set_has_optionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_optionText;
        break;
      }

      // optional string optionText = 2;
      case 2: {
        if (tag == 18) {
         parse_optionText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optiontext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->optiontext().data(), this->optiontext().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UIAction.optionText"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_param2;
        break;
      }

      // optional int32 param2 = 3;
      case 3: {
        if (tag == 24) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional .UIWidgetType id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_id(static_cast< ::UIWidgetType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UIAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UIAction)
  return false;
#undef DO_
}

void UIAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UIAction)
  // optional uint32 optionId = 1;
  if (has_optionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->optionid(), output);
  }

  // optional string optionText = 2;
  if (has_optiontext()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optiontext().data(), this->optiontext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UIAction.optionText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->optiontext(), output);
  }

  // optional int32 param2 = 3;
  if (this->param2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param2(), output);
  }

  // optional .UIWidgetType id = 4;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:UIAction)
}

::google::protobuf::uint8* UIAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UIAction)
  // optional uint32 optionId = 1;
  if (has_optionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->optionid(), target);
  }

  // optional string optionText = 2;
  if (has_optiontext()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->optiontext().data(), this->optiontext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UIAction.optionText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->optiontext(), target);
  }

  // optional int32 param2 = 3;
  if (this->param2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param2(), target);
  }

  // optional .UIWidgetType id = 4;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UIAction)
  return target;
}

int UIAction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:UIAction)
  int total_size = 0;

  // optional int32 param2 = 3;
  if (this->param2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param2());
  }

  // optional .UIWidgetType id = 4;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
  }

  switch (option_case()) {
    // optional uint32 optionId = 1;
    case kOptionId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->optionid());
      break;
    }
    // optional string optionText = 2;
    case kOptionText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->optiontext());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UIAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UIAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UIAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UIAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UIAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UIAction)
    MergeFrom(*source);
  }
}

void UIAction::MergeFrom(const UIAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UIAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.option_case()) {
    case kOptionId: {
      set_optionid(from.optionid());
      break;
    }
    case kOptionText: {
      set_optiontext(from.optiontext());
      break;
    }
    case OPTION_NOT_SET: {
      break;
    }
  }
  if (from.param2() != 0) {
    set_param2(from.param2());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void UIAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UIAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UIAction::CopyFrom(const UIAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UIAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UIAction::IsInitialized() const {

  return true;
}

void UIAction::Swap(UIAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UIAction::InternalSwap(UIAction* other) {
  std::swap(param2_, other->param2_);
  std::swap(id_, other->id_);
  std::swap(option_, other->option_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UIAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UIAction_descriptor_;
  metadata.reflection = UIAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UIAction

// optional uint32 optionId = 1;
bool UIAction::has_optionid() const {
  return option_case() == kOptionId;
}
void UIAction::set_has_optionid() {
  _oneof_case_[0] = kOptionId;
}
void UIAction::clear_optionid() {
  if (has_optionid()) {
    option_.optionid_ = 0u;
    clear_has_option();
  }
}
 ::google::protobuf::uint32 UIAction::optionid() const {
  // @@protoc_insertion_point(field_get:UIAction.optionId)
  if (has_optionid()) {
    return option_.optionid_;
  }
  return 0u;
}
 void UIAction::set_optionid(::google::protobuf::uint32 value) {
  if (!has_optionid()) {
    clear_option();
    set_has_optionid();
  }
  option_.optionid_ = value;
  // @@protoc_insertion_point(field_set:UIAction.optionId)
}

// optional string optionText = 2;
bool UIAction::has_optiontext() const {
  return option_case() == kOptionText;
}
void UIAction::set_has_optiontext() {
  _oneof_case_[0] = kOptionText;
}
void UIAction::clear_optiontext() {
  if (has_optiontext()) {
    option_.optiontext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_option();
  }
}
 const ::std::string& UIAction::optiontext() const {
  // @@protoc_insertion_point(field_get:UIAction.optionText)
  if (has_optiontext()) {
    return option_.optiontext_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void UIAction::set_optiontext(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:UIAction.optionText)
  if (!has_optiontext()) {
    clear_option();
    set_has_optiontext();
    option_.optiontext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  option_.optiontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UIAction.optionText)
}
 void UIAction::set_optiontext(const char* value) {
  if (!has_optiontext()) {
    clear_option();
    set_has_optiontext();
    option_.optiontext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  option_.optiontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UIAction.optionText)
}
 void UIAction::set_optiontext(const char* value, size_t size) {
  if (!has_optiontext()) {
    clear_option();
    set_has_optiontext();
    option_.optiontext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  option_.optiontext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UIAction.optionText)
}
 ::std::string* UIAction::mutable_optiontext() {
  if (!has_optiontext()) {
    clear_option();
    set_has_optiontext();
    option_.optiontext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:UIAction.optionText)
  return option_.optiontext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UIAction::release_optiontext() {
  // @@protoc_insertion_point(field_release:UIAction.optionText)
  if (has_optiontext()) {
    clear_has_option();
    return option_.optiontext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void UIAction::set_allocated_optiontext(::std::string* optiontext) {
  if (!has_optiontext()) {
    option_.optiontext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_option();
  if (optiontext != NULL) {
    set_has_optiontext();
    option_.optiontext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        optiontext);
  }
  // @@protoc_insertion_point(field_set_allocated:UIAction.optionText)
}

// optional int32 param2 = 3;
void UIAction::clear_param2() {
  param2_ = 0;
}
 ::google::protobuf::int32 UIAction::param2() const {
  // @@protoc_insertion_point(field_get:UIAction.param2)
  return param2_;
}
 void UIAction::set_param2(::google::protobuf::int32 value) {
  
  param2_ = value;
  // @@protoc_insertion_point(field_set:UIAction.param2)
}

// optional .UIWidgetType id = 4;
void UIAction::clear_id() {
  id_ = 0;
}
 ::UIWidgetType UIAction::id() const {
  // @@protoc_insertion_point(field_get:UIAction.id)
  return static_cast< ::UIWidgetType >(id_);
}
 void UIAction::set_id(::UIWidgetType value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:UIAction.id)
}

bool UIAction::has_option() const {
  return option_case() != OPTION_NOT_SET;
}
void UIAction::clear_has_option() {
  _oneof_case_[0] = OPTION_NOT_SET;
}
UIAction::OptionCase UIAction::option_case() const {
  return UIAction::OptionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ItemAction::kSlotFieldNumber;
const int ItemAction::kOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ItemAction::ItemAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ItemAction)
}

void ItemAction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ItemAction::ItemAction(const ItemAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ItemAction)
}

void ItemAction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  slot_ = 0u;
  option_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ItemAction::~ItemAction() {
  // @@protoc_insertion_point(destructor:ItemAction)
  SharedDtor();
}

void ItemAction::SharedDtor() {
  option_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ItemAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemAction_descriptor_;
}

const ItemAction& ItemAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

ItemAction* ItemAction::default_instance_ = NULL;

ItemAction* ItemAction::New(::google::protobuf::Arena* arena) const {
  ItemAction* n = new ItemAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemAction::Clear() {
// @@protoc_insertion_point(message_clear_start:ItemAction)
  slot_ = 0u;
  option_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ItemAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ItemAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_option;
        break;
      }

      // optional string option = 2;
      case 2: {
        if (tag == 18) {
         parse_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_option()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->option().data(), this->option().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ItemAction.option"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ItemAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ItemAction)
  return false;
#undef DO_
}

void ItemAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ItemAction)
  // optional uint32 slot = 1;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // optional string option = 2;
  if (this->option().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->option().data(), this->option().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ItemAction.option");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->option(), output);
  }

  // @@protoc_insertion_point(serialize_end:ItemAction)
}

::google::protobuf::uint8* ItemAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ItemAction)
  // optional uint32 slot = 1;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // optional string option = 2;
  if (this->option().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->option().data(), this->option().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ItemAction.option");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->option(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ItemAction)
  return target;
}

int ItemAction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ItemAction)
  int total_size = 0;

  // optional uint32 slot = 1;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }

  // optional string option = 2;
  if (this->option().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->option());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ItemAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ItemAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ItemAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ItemAction)
    MergeFrom(*source);
  }
}

void ItemAction::MergeFrom(const ItemAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ItemAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
  if (from.option().size() > 0) {

    option_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.option_);
  }
}

void ItemAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ItemAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemAction::CopyFrom(const ItemAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ItemAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemAction::IsInitialized() const {

  return true;
}

void ItemAction::Swap(ItemAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemAction::InternalSwap(ItemAction* other) {
  std::swap(slot_, other->slot_);
  option_.Swap(&other->option_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemAction_descriptor_;
  metadata.reflection = ItemAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemAction

// optional uint32 slot = 1;
void ItemAction::clear_slot() {
  slot_ = 0u;
}
 ::google::protobuf::uint32 ItemAction::slot() const {
  // @@protoc_insertion_point(field_get:ItemAction.slot)
  return slot_;
}
 void ItemAction::set_slot(::google::protobuf::uint32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:ItemAction.slot)
}

// optional string option = 2;
void ItemAction::clear_option() {
  option_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ItemAction::option() const {
  // @@protoc_insertion_point(field_get:ItemAction.option)
  return option_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemAction::set_option(const ::std::string& value) {
  
  option_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ItemAction.option)
}
 void ItemAction::set_option(const char* value) {
  
  option_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ItemAction.option)
}
 void ItemAction::set_option(const char* value, size_t size) {
  
  option_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ItemAction.option)
}
 ::std::string* ItemAction::mutable_option() {
  
  // @@protoc_insertion_point(field_mutable:ItemAction.option)
  return option_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ItemAction::release_option() {
  // @@protoc_insertion_point(field_release:ItemAction.option)
  
  return option_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemAction::set_allocated_option(::std::string* option) {
  if (option != NULL) {
    
  } else {
    
  }
  option_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), option);
  // @@protoc_insertion_point(field_set_allocated:ItemAction.option)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Empty::Empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Empty)
}

void Empty::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Empty::Empty(const Empty& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Empty)
}

void Empty::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Empty::~Empty() {
  // @@protoc_insertion_point(destructor:Empty)
  SharedDtor();
}

void Empty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Empty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Empty_descriptor_;
}

const Empty& Empty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

Empty* Empty::default_instance_ = NULL;

Empty* Empty::New(::google::protobuf::Arena* arena) const {
  Empty* n = new Empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Empty::Clear() {
// @@protoc_insertion_point(message_clear_start:Empty)
}

bool Empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:Empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Empty)
  return false;
#undef DO_
}

void Empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Empty)
  // @@protoc_insertion_point(serialize_end:Empty)
}

::google::protobuf::uint8* Empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Empty)
  // @@protoc_insertion_point(serialize_to_array_end:Empty)
  return target;
}

int Empty::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Empty)
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Empty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Empty* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Empty)
    MergeFrom(*source);
  }
}

void Empty::MergeFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Empty)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
}

void Empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Empty::CopyFrom(const Empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Empty::IsInitialized() const {

  return true;
}

void Empty::Swap(Empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Empty::InternalSwap(Empty* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Empty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Empty_descriptor_;
  metadata.reflection = Empty_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Empty

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Entity_MovementType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_MovementType_descriptor_;
}
bool Entity_MovementType_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Entity_MovementType Entity::Standing;
const Entity_MovementType Entity::Walking;
const Entity_MovementType Entity::Running;
const Entity_MovementType Entity::MovementType_MIN;
const Entity_MovementType Entity::MovementType_MAX;
const int Entity::MovementType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Entity::kIdFieldNumber;
const int Entity::kTypeFieldNumber;
const int Entity::kNameFieldNumber;
const int Entity::kLocationFieldNumber;
const int Entity::kHealthFieldNumber;
const int Entity::kMaxHealthFieldNumber;
const int Entity::kLevelFieldNumber;
const int Entity::kIsInteractingFieldNumber;
const int Entity::kMovTypeFieldNumber;
const int Entity::kActionIdFieldNumber;
const int Entity::kOptionsFieldNumber;
const int Entity::kIsControlledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Entity::Entity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Entity)
}

void Entity::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  location_ = const_cast< ::Location*>(&::Location::default_instance());
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Entity)
}

void Entity::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  location_ = NULL;
  health_ = 0;
  max_health_ = 0;
  level_ = 0;
  is_interacting_ = false;
  mov_type_ = 0;
  action_id_ = 0u;
  is_controlled_ = false;
}

Entity::~Entity() {
  // @@protoc_insertion_point(destructor:Entity)
  SharedDtor();
}

void Entity::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete location_;
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

Entity* Entity::default_instance_ = NULL;

Entity* Entity::New(::google::protobuf::Arena* arena) const {
  Entity* n = new Entity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entity::Clear() {
// @@protoc_insertion_point(message_clear_start:Entity)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Entity, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Entity*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, type_);
  ZR_(health_, level_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
  is_interacting_ = false;
  ZR_(mov_type_, action_id_);
  is_controlled_ = false;

#undef ZR_HELPER_
#undef ZR_

  options_.Clear();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Entity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .EntityType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::EntityType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Entity.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional .Location location = 4;
      case 4: {
        if (tag == 34) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_health;
        break;
      }

      // optional int32 health = 5;
      case 5: {
        if (tag == 40) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_max_health;
        break;
      }

      // optional int32 max_health = 6;
      case 6: {
        if (tag == 48) {
         parse_max_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_health_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_is_interacting;
        break;
      }

      // optional bool is_interacting = 8;
      case 8: {
        if (tag == 64) {
         parse_is_interacting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_interacting_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mov_type;
        break;
      }

      // optional .Entity.MovementType mov_type = 9;
      case 9: {
        if (tag == 72) {
         parse_mov_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mov_type(static_cast< ::Entity_MovementType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_action_id;
        break;
      }

      // optional uint32 action_id = 10;
      case 10: {
        if (tag == 80) {
         parse_action_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_options;
        break;
      }

      // repeated string options = 11;
      case 11: {
        if (tag == 90) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_options()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->options(this->options_size() - 1).data(),
            this->options(this->options_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Entity.options"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_options;
        if (input->ExpectTag(96)) goto parse_is_controlled;
        break;
      }

      // optional bool is_controlled = 12;
      case 12: {
        if (tag == 96) {
         parse_is_controlled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_controlled_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Entity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Entity)
  return false;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Entity)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .EntityType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Entity.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .Location location = 4;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  // optional int32 health = 5;
  if (this->health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->health(), output);
  }

  // optional int32 max_health = 6;
  if (this->max_health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_health(), output);
  }

  // optional int32 level = 7;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional bool is_interacting = 8;
  if (this->is_interacting() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_interacting(), output);
  }

  // optional .Entity.MovementType mov_type = 9;
  if (this->mov_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->mov_type(), output);
  }

  // optional uint32 action_id = 10;
  if (this->action_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->action_id(), output);
  }

  // repeated string options = 11;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->options(i).data(), this->options(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Entity.options");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->options(i), output);
  }

  // optional bool is_controlled = 12;
  if (this->is_controlled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_controlled(), output);
  }

  // @@protoc_insertion_point(serialize_end:Entity)
}

::google::protobuf::uint8* Entity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Entity)
  // optional uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .EntityType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Entity.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .Location location = 4;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->location_, false, target);
  }

  // optional int32 health = 5;
  if (this->health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->health(), target);
  }

  // optional int32 max_health = 6;
  if (this->max_health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_health(), target);
  }

  // optional int32 level = 7;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional bool is_interacting = 8;
  if (this->is_interacting() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_interacting(), target);
  }

  // optional .Entity.MovementType mov_type = 9;
  if (this->mov_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->mov_type(), target);
  }

  // optional uint32 action_id = 10;
  if (this->action_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->action_id(), target);
  }

  // repeated string options = 11;
  for (int i = 0; i < this->options_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->options(i).data(), this->options(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Entity.options");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->options(i), target);
  }

  // optional bool is_controlled = 12;
  if (this->is_controlled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_controlled(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Entity)
  return target;
}

int Entity::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Entity)
  int total_size = 0;

  // optional uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // optional .EntityType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .Location location = 4;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // optional int32 health = 5;
  if (this->health() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->health());
  }

  // optional int32 max_health = 6;
  if (this->max_health() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_health());
  }

  // optional int32 level = 7;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->level());
  }

  // optional bool is_interacting = 8;
  if (this->is_interacting() != 0) {
    total_size += 1 + 1;
  }

  // optional .Entity.MovementType mov_type = 9;
  if (this->mov_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mov_type());
  }

  // optional uint32 action_id = 10;
  if (this->action_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->action_id());
  }

  // optional bool is_controlled = 12;
  if (this->is_controlled() != 0) {
    total_size += 1 + 1;
  }

  // repeated string options = 11;
  total_size += 1 * this->options_size();
  for (int i = 0; i < this->options_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->options(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Entity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Entity* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Entity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Entity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Entity)
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Entity)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  options_.MergeFrom(from.options_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_location()) {
    mutable_location()->::Location::MergeFrom(from.location());
  }
  if (from.health() != 0) {
    set_health(from.health());
  }
  if (from.max_health() != 0) {
    set_max_health(from.max_health());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.is_interacting() != 0) {
    set_is_interacting(from.is_interacting());
  }
  if (from.mov_type() != 0) {
    set_mov_type(from.mov_type());
  }
  if (from.action_id() != 0) {
    set_action_id(from.action_id());
  }
  if (from.is_controlled() != 0) {
    set_is_controlled(from.is_controlled());
  }
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Entity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {

  return true;
}

void Entity::Swap(Entity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entity::InternalSwap(Entity* other) {
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  name_.Swap(&other->name_);
  std::swap(location_, other->location_);
  std::swap(health_, other->health_);
  std::swap(max_health_, other->max_health_);
  std::swap(level_, other->level_);
  std::swap(is_interacting_, other->is_interacting_);
  std::swap(mov_type_, other->mov_type_);
  std::swap(action_id_, other->action_id_);
  options_.UnsafeArenaSwap(&other->options_);
  std::swap(is_controlled_, other->is_controlled_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entity

// optional uint32 id = 1;
void Entity::clear_id() {
  id_ = 0u;
}
 ::google::protobuf::uint32 Entity::id() const {
  // @@protoc_insertion_point(field_get:Entity.id)
  return id_;
}
 void Entity::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Entity.id)
}

// optional .EntityType type = 2;
void Entity::clear_type() {
  type_ = 0;
}
 ::EntityType Entity::type() const {
  // @@protoc_insertion_point(field_get:Entity.type)
  return static_cast< ::EntityType >(type_);
}
 void Entity::set_type(::EntityType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Entity.type)
}

// optional string name = 3;
void Entity::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Entity::name() const {
  // @@protoc_insertion_point(field_get:Entity.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entity::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Entity.name)
}
 void Entity::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Entity.name)
}
 void Entity::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Entity.name)
}
 ::std::string* Entity::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Entity.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Entity::release_name() {
  // @@protoc_insertion_point(field_release:Entity.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entity::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Entity.name)
}

// optional .Location location = 4;
bool Entity::has_location() const {
  return !_is_default_instance_ && location_ != NULL;
}
void Entity::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::Location& Entity::location() const {
  // @@protoc_insertion_point(field_get:Entity.location)
  return location_ != NULL ? *location_ : *default_instance_->location_;
}
::Location* Entity::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::Location;
  }
  // @@protoc_insertion_point(field_mutable:Entity.location)
  return location_;
}
::Location* Entity::release_location() {
  // @@protoc_insertion_point(field_release:Entity.location)
  
  ::Location* temp = location_;
  location_ = NULL;
  return temp;
}
void Entity::set_allocated_location(::Location* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Entity.location)
}

// optional int32 health = 5;
void Entity::clear_health() {
  health_ = 0;
}
 ::google::protobuf::int32 Entity::health() const {
  // @@protoc_insertion_point(field_get:Entity.health)
  return health_;
}
 void Entity::set_health(::google::protobuf::int32 value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:Entity.health)
}

// optional int32 max_health = 6;
void Entity::clear_max_health() {
  max_health_ = 0;
}
 ::google::protobuf::int32 Entity::max_health() const {
  // @@protoc_insertion_point(field_get:Entity.max_health)
  return max_health_;
}
 void Entity::set_max_health(::google::protobuf::int32 value) {
  
  max_health_ = value;
  // @@protoc_insertion_point(field_set:Entity.max_health)
}

// optional int32 level = 7;
void Entity::clear_level() {
  level_ = 0;
}
 ::google::protobuf::int32 Entity::level() const {
  // @@protoc_insertion_point(field_get:Entity.level)
  return level_;
}
 void Entity::set_level(::google::protobuf::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:Entity.level)
}

// optional bool is_interacting = 8;
void Entity::clear_is_interacting() {
  is_interacting_ = false;
}
 bool Entity::is_interacting() const {
  // @@protoc_insertion_point(field_get:Entity.is_interacting)
  return is_interacting_;
}
 void Entity::set_is_interacting(bool value) {
  
  is_interacting_ = value;
  // @@protoc_insertion_point(field_set:Entity.is_interacting)
}

// optional .Entity.MovementType mov_type = 9;
void Entity::clear_mov_type() {
  mov_type_ = 0;
}
 ::Entity_MovementType Entity::mov_type() const {
  // @@protoc_insertion_point(field_get:Entity.mov_type)
  return static_cast< ::Entity_MovementType >(mov_type_);
}
 void Entity::set_mov_type(::Entity_MovementType value) {
  
  mov_type_ = value;
  // @@protoc_insertion_point(field_set:Entity.mov_type)
}

// optional uint32 action_id = 10;
void Entity::clear_action_id() {
  action_id_ = 0u;
}
 ::google::protobuf::uint32 Entity::action_id() const {
  // @@protoc_insertion_point(field_get:Entity.action_id)
  return action_id_;
}
 void Entity::set_action_id(::google::protobuf::uint32 value) {
  
  action_id_ = value;
  // @@protoc_insertion_point(field_set:Entity.action_id)
}

// repeated string options = 11;
int Entity::options_size() const {
  return options_.size();
}
void Entity::clear_options() {
  options_.Clear();
}
 const ::std::string& Entity::options(int index) const {
  // @@protoc_insertion_point(field_get:Entity.options)
  return options_.Get(index);
}
 ::std::string* Entity::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:Entity.options)
  return options_.Mutable(index);
}
 void Entity::set_options(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Entity.options)
  options_.Mutable(index)->assign(value);
}
 void Entity::set_options(int index, const char* value) {
  options_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Entity.options)
}
 void Entity::set_options(int index, const char* value, size_t size) {
  options_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Entity.options)
}
 ::std::string* Entity::add_options() {
  // @@protoc_insertion_point(field_add_mutable:Entity.options)
  return options_.Add();
}
 void Entity::add_options(const ::std::string& value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Entity.options)
}
 void Entity::add_options(const char* value) {
  options_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Entity.options)
}
 void Entity::add_options(const char* value, size_t size) {
  options_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Entity.options)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Entity::options() const {
  // @@protoc_insertion_point(field_list:Entity.options)
  return options_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Entity::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:Entity.options)
  return &options_;
}

// optional bool is_controlled = 12;
void Entity::clear_is_controlled() {
  is_controlled_ = false;
}
 bool Entity::is_controlled() const {
  // @@protoc_insertion_point(field_get:Entity.is_controlled)
  return is_controlled_;
}
 void Entity::set_is_controlled(bool value) {
  
  is_controlled_ = value;
  // @@protoc_insertion_point(field_set:Entity.is_controlled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InteractRequest::kEntityFieldNumber;
const int InteractRequest::kOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InteractRequest::InteractRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InteractRequest)
}

void InteractRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  entity_ = const_cast< ::Entity*>(&::Entity::default_instance());
}

InteractRequest::InteractRequest(const InteractRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:InteractRequest)
}

void InteractRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  entity_ = NULL;
  option_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InteractRequest::~InteractRequest() {
  // @@protoc_insertion_point(destructor:InteractRequest)
  SharedDtor();
}

void InteractRequest::SharedDtor() {
  option_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete entity_;
  }
}

void InteractRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InteractRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InteractRequest_descriptor_;
}

const InteractRequest& InteractRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

InteractRequest* InteractRequest::default_instance_ = NULL;

InteractRequest* InteractRequest::New(::google::protobuf::Arena* arena) const {
  InteractRequest* n = new InteractRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InteractRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:InteractRequest)
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
  option_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool InteractRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InteractRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Entity entity = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_option;
        break;
      }

      // optional string option = 2;
      case 2: {
        if (tag == 18) {
         parse_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_option()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->option().data(), this->option().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "InteractRequest.option"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InteractRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InteractRequest)
  return false;
#undef DO_
}

void InteractRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InteractRequest)
  // optional .Entity entity = 1;
  if (this->has_entity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->entity_, output);
  }

  // optional string option = 2;
  if (this->option().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->option().data(), this->option().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InteractRequest.option");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->option(), output);
  }

  // @@protoc_insertion_point(serialize_end:InteractRequest)
}

::google::protobuf::uint8* InteractRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:InteractRequest)
  // optional .Entity entity = 1;
  if (this->has_entity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->entity_, false, target);
  }

  // optional string option = 2;
  if (this->option().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->option().data(), this->option().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "InteractRequest.option");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->option(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:InteractRequest)
  return target;
}

int InteractRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:InteractRequest)
  int total_size = 0;

  // optional .Entity entity = 1;
  if (this->has_entity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->entity_);
  }

  // optional string option = 2;
  if (this->option().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->option());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InteractRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InteractRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InteractRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InteractRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InteractRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InteractRequest)
    MergeFrom(*source);
  }
}

void InteractRequest::MergeFrom(const InteractRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InteractRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_entity()) {
    mutable_entity()->::Entity::MergeFrom(from.entity());
  }
  if (from.option().size() > 0) {

    option_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.option_);
  }
}

void InteractRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InteractRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractRequest::CopyFrom(const InteractRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InteractRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractRequest::IsInitialized() const {

  return true;
}

void InteractRequest::Swap(InteractRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InteractRequest::InternalSwap(InteractRequest* other) {
  std::swap(entity_, other->entity_);
  option_.Swap(&other->option_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InteractRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InteractRequest_descriptor_;
  metadata.reflection = InteractRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InteractRequest

// optional .Entity entity = 1;
bool InteractRequest::has_entity() const {
  return !_is_default_instance_ && entity_ != NULL;
}
void InteractRequest::clear_entity() {
  if (GetArenaNoVirtual() == NULL && entity_ != NULL) delete entity_;
  entity_ = NULL;
}
const ::Entity& InteractRequest::entity() const {
  // @@protoc_insertion_point(field_get:InteractRequest.entity)
  return entity_ != NULL ? *entity_ : *default_instance_->entity_;
}
::Entity* InteractRequest::mutable_entity() {
  
  if (entity_ == NULL) {
    entity_ = new ::Entity;
  }
  // @@protoc_insertion_point(field_mutable:InteractRequest.entity)
  return entity_;
}
::Entity* InteractRequest::release_entity() {
  // @@protoc_insertion_point(field_release:InteractRequest.entity)
  
  ::Entity* temp = entity_;
  entity_ = NULL;
  return temp;
}
void InteractRequest::set_allocated_entity(::Entity* entity) {
  delete entity_;
  entity_ = entity;
  if (entity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:InteractRequest.entity)
}

// optional string option = 2;
void InteractRequest::clear_option() {
  option_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& InteractRequest::option() const {
  // @@protoc_insertion_point(field_get:InteractRequest.option)
  return option_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InteractRequest::set_option(const ::std::string& value) {
  
  option_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InteractRequest.option)
}
 void InteractRequest::set_option(const char* value) {
  
  option_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InteractRequest.option)
}
 void InteractRequest::set_option(const char* value, size_t size) {
  
  option_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InteractRequest.option)
}
 ::std::string* InteractRequest::mutable_option() {
  
  // @@protoc_insertion_point(field_mutable:InteractRequest.option)
  return option_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InteractRequest::release_option() {
  // @@protoc_insertion_point(field_release:InteractRequest.option)
  
  return option_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InteractRequest::set_allocated_option(::std::string* option) {
  if (option != NULL) {
    
  } else {
    
  }
  option_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), option);
  // @@protoc_insertion_point(field_set_allocated:InteractRequest.option)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EntitiesResponse::kEntitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EntitiesResponse::EntitiesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EntitiesResponse)
}

void EntitiesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EntitiesResponse::EntitiesResponse(const EntitiesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EntitiesResponse)
}

void EntitiesResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EntitiesResponse::~EntitiesResponse() {
  // @@protoc_insertion_point(destructor:EntitiesResponse)
  SharedDtor();
}

void EntitiesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntitiesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntitiesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntitiesResponse_descriptor_;
}

const EntitiesResponse& EntitiesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

EntitiesResponse* EntitiesResponse::default_instance_ = NULL;

EntitiesResponse* EntitiesResponse::New(::google::protobuf::Arena* arena) const {
  EntitiesResponse* n = new EntitiesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EntitiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:EntitiesResponse)
  entities_.Clear();
}

bool EntitiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EntitiesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Entity entities = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_entities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_entities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EntitiesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EntitiesResponse)
  return false;
#undef DO_
}

void EntitiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EntitiesResponse)
  // repeated .Entity entities = 1;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entities(i), output);
  }

  // @@protoc_insertion_point(serialize_end:EntitiesResponse)
}

::google::protobuf::uint8* EntitiesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EntitiesResponse)
  // repeated .Entity entities = 1;
  for (unsigned int i = 0, n = this->entities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->entities(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:EntitiesResponse)
  return target;
}

int EntitiesResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:EntitiesResponse)
  int total_size = 0;

  // repeated .Entity entities = 1;
  total_size += 1 * this->entities_size();
  for (int i = 0; i < this->entities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entities(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntitiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EntitiesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EntitiesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EntitiesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EntitiesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EntitiesResponse)
    MergeFrom(*source);
  }
}

void EntitiesResponse::MergeFrom(const EntitiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EntitiesResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  entities_.MergeFrom(from.entities_);
}

void EntitiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EntitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntitiesResponse::CopyFrom(const EntitiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EntitiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitiesResponse::IsInitialized() const {

  return true;
}

void EntitiesResponse::Swap(EntitiesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EntitiesResponse::InternalSwap(EntitiesResponse* other) {
  entities_.UnsafeArenaSwap(&other->entities_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EntitiesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntitiesResponse_descriptor_;
  metadata.reflection = EntitiesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EntitiesResponse

// repeated .Entity entities = 1;
int EntitiesResponse::entities_size() const {
  return entities_.size();
}
void EntitiesResponse::clear_entities() {
  entities_.Clear();
}
const ::Entity& EntitiesResponse::entities(int index) const {
  // @@protoc_insertion_point(field_get:EntitiesResponse.entities)
  return entities_.Get(index);
}
::Entity* EntitiesResponse::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:EntitiesResponse.entities)
  return entities_.Mutable(index);
}
::Entity* EntitiesResponse::add_entities() {
  // @@protoc_insertion_point(field_add:EntitiesResponse.entities)
  return entities_.Add();
}
::google::protobuf::RepeatedPtrField< ::Entity >*
EntitiesResponse::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:EntitiesResponse.entities)
  return &entities_;
}
const ::google::protobuf::RepeatedPtrField< ::Entity >&
EntitiesResponse::entities() const {
  // @@protoc_insertion_point(field_list:EntitiesResponse.entities)
  return entities_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kTileXFieldNumber;
const int Location::kTileYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Location)
}

void Location::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Location::Location(const Location& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Location)
}

void Location::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  tile_x_ = 0;
  tile_y_ = 0;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Location_descriptor_;
}

const Location& Location::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

Location* Location::default_instance_ = NULL;

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:Location)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Location, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Location*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tile_x_, tile_y_);

#undef ZR_HELPER_
#undef ZR_

}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tile_x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_x_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tile_y;
        break;
      }

      // optional int32 tile_y = 2;
      case 2: {
        if (tag == 16) {
         parse_tile_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_y_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Location)
  // optional int32 tile_x = 1;
  if (this->tile_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tile_x(), output);
  }

  // optional int32 tile_y = 2;
  if (this->tile_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tile_y(), output);
  }

  // @@protoc_insertion_point(serialize_end:Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Location)
  // optional int32 tile_x = 1;
  if (this->tile_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tile_x(), target);
  }

  // optional int32 tile_y = 2;
  if (this->tile_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tile_y(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Location)
  return target;
}

int Location::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Location)
  int total_size = 0;

  // optional int32 tile_x = 1;
  if (this->tile_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tile_x());
  }

  // optional int32 tile_y = 2;
  if (this->tile_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tile_y());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Location* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Location)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.tile_x() != 0) {
    set_tile_x(from.tile_x());
  }
  if (from.tile_y() != 0) {
    set_tile_y(from.tile_y());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {

  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  std::swap(tile_x_, other->tile_x_);
  std::swap(tile_y_, other->tile_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Location_descriptor_;
  metadata.reflection = Location_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// optional int32 tile_x = 1;
void Location::clear_tile_x() {
  tile_x_ = 0;
}
 ::google::protobuf::int32 Location::tile_x() const {
  // @@protoc_insertion_point(field_get:Location.tile_x)
  return tile_x_;
}
 void Location::set_tile_x(::google::protobuf::int32 value) {
  
  tile_x_ = value;
  // @@protoc_insertion_point(field_set:Location.tile_x)
}

// optional int32 tile_y = 2;
void Location::clear_tile_y() {
  tile_y_ = 0;
}
 ::google::protobuf::int32 Location::tile_y() const {
  // @@protoc_insertion_point(field_get:Location.tile_y)
  return tile_y_;
}
 void Location::set_tile_y(::google::protobuf::int32 value) {
  
  tile_y_ = value;
  // @@protoc_insertion_point(field_set:Location.tile_y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Inventory_InventoryItem::kIdFieldNumber;
const int Inventory_InventoryItem::kQuantityFieldNumber;
const int Inventory_InventoryItem::kNameFieldNumber;
const int Inventory_InventoryItem::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Inventory_InventoryItem::Inventory_InventoryItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Inventory.InventoryItem)
}

void Inventory_InventoryItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Inventory_InventoryItem::Inventory_InventoryItem(const Inventory_InventoryItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Inventory.InventoryItem)
}

void Inventory_InventoryItem::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  quantity_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_ = 0;
}

Inventory_InventoryItem::~Inventory_InventoryItem() {
  // @@protoc_insertion_point(destructor:Inventory.InventoryItem)
  SharedDtor();
}

void Inventory_InventoryItem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Inventory_InventoryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inventory_InventoryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inventory_InventoryItem_descriptor_;
}

const Inventory_InventoryItem& Inventory_InventoryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

Inventory_InventoryItem* Inventory_InventoryItem::default_instance_ = NULL;

Inventory_InventoryItem* Inventory_InventoryItem::New(::google::protobuf::Arena* arena) const {
  Inventory_InventoryItem* n = new Inventory_InventoryItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Inventory_InventoryItem::Clear() {
// @@protoc_insertion_point(message_clear_start:Inventory.InventoryItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Inventory_InventoryItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Inventory_InventoryItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, quantity_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slot_ = 0;

#undef ZR_HELPER_
#undef ZR_

}

bool Inventory_InventoryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Inventory.InventoryItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quantity;
        break;
      }

      // optional int32 quantity = 2;
      case 2: {
        if (tag == 16) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Inventory.InventoryItem.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_slot;
        break;
      }

      // optional int32 slot = 4;
      case 4: {
        if (tag == 32) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Inventory.InventoryItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Inventory.InventoryItem)
  return false;
#undef DO_
}

void Inventory_InventoryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Inventory.InventoryItem)
  // optional int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 quantity = 2;
  if (this->quantity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quantity(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Inventory.InventoryItem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 slot = 4;
  if (this->slot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slot(), output);
  }

  // @@protoc_insertion_point(serialize_end:Inventory.InventoryItem)
}

::google::protobuf::uint8* Inventory_InventoryItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Inventory.InventoryItem)
  // optional int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 quantity = 2;
  if (this->quantity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quantity(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Inventory.InventoryItem.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 slot = 4;
  if (this->slot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slot(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Inventory.InventoryItem)
  return target;
}

int Inventory_InventoryItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Inventory.InventoryItem)
  int total_size = 0;

  // optional int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // optional int32 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->quantity());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional int32 slot = 4;
  if (this->slot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->slot());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inventory_InventoryItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Inventory.InventoryItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Inventory_InventoryItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Inventory_InventoryItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Inventory.InventoryItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Inventory.InventoryItem)
    MergeFrom(*source);
  }
}

void Inventory_InventoryItem::MergeFrom(const Inventory_InventoryItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Inventory.InventoryItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.quantity() != 0) {
    set_quantity(from.quantity());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.slot() != 0) {
    set_slot(from.slot());
  }
}

void Inventory_InventoryItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Inventory.InventoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inventory_InventoryItem::CopyFrom(const Inventory_InventoryItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Inventory.InventoryItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory_InventoryItem::IsInitialized() const {

  return true;
}

void Inventory_InventoryItem::Swap(Inventory_InventoryItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Inventory_InventoryItem::InternalSwap(Inventory_InventoryItem* other) {
  std::swap(id_, other->id_);
  std::swap(quantity_, other->quantity_);
  name_.Swap(&other->name_);
  std::swap(slot_, other->slot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Inventory_InventoryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Inventory_InventoryItem_descriptor_;
  metadata.reflection = Inventory_InventoryItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Inventory::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Inventory::Inventory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Inventory)
}

void Inventory::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Inventory::Inventory(const Inventory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Inventory)
}

void Inventory::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Inventory::~Inventory() {
  // @@protoc_insertion_point(destructor:Inventory)
  SharedDtor();
}

void Inventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Inventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inventory_descriptor_;
}

const Inventory& Inventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_world_2eproto();
  return *default_instance_;
}

Inventory* Inventory::default_instance_ = NULL;

Inventory* Inventory::New(::google::protobuf::Arena* arena) const {
  Inventory* n = new Inventory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Inventory::Clear() {
// @@protoc_insertion_point(message_clear_start:Inventory)
  items_.Clear();
}

bool Inventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Inventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Inventory.InventoryItem items = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_items;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Inventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Inventory)
  return false;
#undef DO_
}

void Inventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Inventory)
  // repeated .Inventory.InventoryItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Inventory)
}

::google::protobuf::uint8* Inventory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Inventory)
  // repeated .Inventory.InventoryItem items = 1;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->items(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Inventory)
  return target;
}

int Inventory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Inventory)
  int total_size = 0;

  // repeated .Inventory.InventoryItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inventory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Inventory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Inventory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Inventory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Inventory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Inventory)
    MergeFrom(*source);
  }
}

void Inventory::MergeFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Inventory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  items_.MergeFrom(from.items_);
}

void Inventory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inventory::CopyFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {

  return true;
}

void Inventory::Swap(Inventory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Inventory::InternalSwap(Inventory* other) {
  items_.UnsafeArenaSwap(&other->items_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Inventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Inventory_descriptor_;
  metadata.reflection = Inventory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Inventory_InventoryItem

// optional int32 id = 1;
void Inventory_InventoryItem::clear_id() {
  id_ = 0;
}
 ::google::protobuf::int32 Inventory_InventoryItem::id() const {
  // @@protoc_insertion_point(field_get:Inventory.InventoryItem.id)
  return id_;
}
 void Inventory_InventoryItem::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Inventory.InventoryItem.id)
}

// optional int32 quantity = 2;
void Inventory_InventoryItem::clear_quantity() {
  quantity_ = 0;
}
 ::google::protobuf::int32 Inventory_InventoryItem::quantity() const {
  // @@protoc_insertion_point(field_get:Inventory.InventoryItem.quantity)
  return quantity_;
}
 void Inventory_InventoryItem::set_quantity(::google::protobuf::int32 value) {
  
  quantity_ = value;
  // @@protoc_insertion_point(field_set:Inventory.InventoryItem.quantity)
}

// optional string name = 3;
void Inventory_InventoryItem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Inventory_InventoryItem::name() const {
  // @@protoc_insertion_point(field_get:Inventory.InventoryItem.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Inventory_InventoryItem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Inventory.InventoryItem.name)
}
 void Inventory_InventoryItem::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Inventory.InventoryItem.name)
}
 void Inventory_InventoryItem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Inventory.InventoryItem.name)
}
 ::std::string* Inventory_InventoryItem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Inventory.InventoryItem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Inventory_InventoryItem::release_name() {
  // @@protoc_insertion_point(field_release:Inventory.InventoryItem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Inventory_InventoryItem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Inventory.InventoryItem.name)
}

// optional int32 slot = 4;
void Inventory_InventoryItem::clear_slot() {
  slot_ = 0;
}
 ::google::protobuf::int32 Inventory_InventoryItem::slot() const {
  // @@protoc_insertion_point(field_get:Inventory.InventoryItem.slot)
  return slot_;
}
 void Inventory_InventoryItem::set_slot(::google::protobuf::int32 value) {
  
  slot_ = value;
  // @@protoc_insertion_point(field_set:Inventory.InventoryItem.slot)
}

// -------------------------------------------------------------------

// Inventory

// repeated .Inventory.InventoryItem items = 1;
int Inventory::items_size() const {
  return items_.size();
}
void Inventory::clear_items() {
  items_.Clear();
}
const ::Inventory_InventoryItem& Inventory::items(int index) const {
  // @@protoc_insertion_point(field_get:Inventory.items)
  return items_.Get(index);
}
::Inventory_InventoryItem* Inventory::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Inventory.items)
  return items_.Mutable(index);
}
::Inventory_InventoryItem* Inventory::add_items() {
  // @@protoc_insertion_point(field_add:Inventory.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::Inventory_InventoryItem >*
Inventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Inventory.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::Inventory_InventoryItem >&
Inventory::items() const {
  // @@protoc_insertion_point(field_list:Inventory.items)
  return items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
