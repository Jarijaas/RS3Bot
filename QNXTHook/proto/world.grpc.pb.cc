// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: world.proto

#include "world.pb.h"
#include "world.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* RS3_method_names[] = {
  "/RS3/FindEntities",
  "/RS3/Interact",
  "/RS3/MoveTo",
  "/RS3/GetInventory",
  "/RS3/DoUIAction",
  "/RS3/DoItemInterfaceAction",
  "/RS3/BackpackItemAction",
  "/RS3/GetProperty",
  "/RS3/IsUIWidgetVisible",
  "/RS3/GetControlledPlayer",
  "/RS3/GetWidget",
  "/RS3/OnChatMessage",
  "/RS3/OnCursorAction",
  "/RS3/OnInterfaceOpen",
};

std::unique_ptr< RS3::Stub> RS3::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RS3::Stub> stub(new RS3::Stub(channel));
  return stub;
}

RS3::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FindEntities_(RS3_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Interact_(RS3_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveTo_(RS3_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetInventory_(RS3_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoUIAction_(RS3_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoItemInterfaceAction_(RS3_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BackpackItemAction_(RS3_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetProperty_(RS3_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsUIWidgetVisible_(RS3_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetControlledPlayer_(RS3_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWidget_(RS3_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnChatMessage_(RS3_method_names[11], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_OnCursorAction_(RS3_method_names[12], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_OnInterfaceOpen_(RS3_method_names[13], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status RS3::Stub::FindEntities(::grpc::ClientContext* context, const ::EntityRequest& request, ::EntitiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FindEntities_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::EntitiesResponse>* RS3::Stub::AsyncFindEntitiesRaw(::grpc::ClientContext* context, const ::EntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EntitiesResponse>::Create(channel_.get(), cq, rpcmethod_FindEntities_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::EntitiesResponse>* RS3::Stub::PrepareAsyncFindEntitiesRaw(::grpc::ClientContext* context, const ::EntityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::EntitiesResponse>::Create(channel_.get(), cq, rpcmethod_FindEntities_, context, request, false);
}

::grpc::Status RS3::Stub::Interact(::grpc::ClientContext* context, const ::InteractRequest& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Interact_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* RS3::Stub::AsyncInteractRaw(::grpc::ClientContext* context, const ::InteractRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_Interact_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* RS3::Stub::PrepareAsyncInteractRaw(::grpc::ClientContext* context, const ::InteractRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_Interact_, context, request, false);
}

::grpc::Status RS3::Stub::MoveTo(::grpc::ClientContext* context, const ::Location& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MoveTo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* RS3::Stub::AsyncMoveToRaw(::grpc::ClientContext* context, const ::Location& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_MoveTo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* RS3::Stub::PrepareAsyncMoveToRaw(::grpc::ClientContext* context, const ::Location& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_MoveTo_, context, request, false);
}

::grpc::Status RS3::Stub::GetInventory(::grpc::ClientContext* context, const ::InventoryTypeRequest& request, ::Inventory* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInventory_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Inventory>* RS3::Stub::AsyncGetInventoryRaw(::grpc::ClientContext* context, const ::InventoryTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Inventory>::Create(channel_.get(), cq, rpcmethod_GetInventory_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Inventory>* RS3::Stub::PrepareAsyncGetInventoryRaw(::grpc::ClientContext* context, const ::InventoryTypeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Inventory>::Create(channel_.get(), cq, rpcmethod_GetInventory_, context, request, false);
}

::grpc::Status RS3::Stub::DoUIAction(::grpc::ClientContext* context, const ::UIAction& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoUIAction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* RS3::Stub::AsyncDoUIActionRaw(::grpc::ClientContext* context, const ::UIAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_DoUIAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* RS3::Stub::PrepareAsyncDoUIActionRaw(::grpc::ClientContext* context, const ::UIAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_DoUIAction_, context, request, false);
}

::grpc::Status RS3::Stub::DoItemInterfaceAction(::grpc::ClientContext* context, const ::UIAction& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoItemInterfaceAction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* RS3::Stub::AsyncDoItemInterfaceActionRaw(::grpc::ClientContext* context, const ::UIAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_DoItemInterfaceAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* RS3::Stub::PrepareAsyncDoItemInterfaceActionRaw(::grpc::ClientContext* context, const ::UIAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_DoItemInterfaceAction_, context, request, false);
}

::grpc::Status RS3::Stub::BackpackItemAction(::grpc::ClientContext* context, const ::ItemAction& request, ::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BackpackItemAction_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Empty>* RS3::Stub::AsyncBackpackItemActionRaw(::grpc::ClientContext* context, const ::ItemAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_BackpackItemAction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Empty>* RS3::Stub::PrepareAsyncBackpackItemActionRaw(::grpc::ClientContext* context, const ::ItemAction& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Empty>::Create(channel_.get(), cq, rpcmethod_BackpackItemAction_, context, request, false);
}

::grpc::Status RS3::Stub::GetProperty(::grpc::ClientContext* context, const ::IdRequest& request, ::PropertyValue* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetProperty_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::PropertyValue>* RS3::Stub::AsyncGetPropertyRaw(::grpc::ClientContext* context, const ::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::PropertyValue>::Create(channel_.get(), cq, rpcmethod_GetProperty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::PropertyValue>* RS3::Stub::PrepareAsyncGetPropertyRaw(::grpc::ClientContext* context, const ::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::PropertyValue>::Create(channel_.get(), cq, rpcmethod_GetProperty_, context, request, false);
}

::grpc::Status RS3::Stub::IsUIWidgetVisible(::grpc::ClientContext* context, const ::IdRequest& request, ::BoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsUIWidgetVisible_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::BoolResponse>* RS3::Stub::AsyncIsUIWidgetVisibleRaw(::grpc::ClientContext* context, const ::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::BoolResponse>::Create(channel_.get(), cq, rpcmethod_IsUIWidgetVisible_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::BoolResponse>* RS3::Stub::PrepareAsyncIsUIWidgetVisibleRaw(::grpc::ClientContext* context, const ::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::BoolResponse>::Create(channel_.get(), cq, rpcmethod_IsUIWidgetVisible_, context, request, false);
}

::grpc::Status RS3::Stub::GetControlledPlayer(::grpc::ClientContext* context, const ::Empty& request, ::Entity* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetControlledPlayer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Entity>* RS3::Stub::AsyncGetControlledPlayerRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Entity>::Create(channel_.get(), cq, rpcmethod_GetControlledPlayer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Entity>* RS3::Stub::PrepareAsyncGetControlledPlayerRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Entity>::Create(channel_.get(), cq, rpcmethod_GetControlledPlayer_, context, request, false);
}

::grpc::Status RS3::Stub::GetWidget(::grpc::ClientContext* context, const ::IdRequest& request, ::Widget* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetWidget_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Widget>* RS3::Stub::AsyncGetWidgetRaw(::grpc::ClientContext* context, const ::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Widget>::Create(channel_.get(), cq, rpcmethod_GetWidget_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Widget>* RS3::Stub::PrepareAsyncGetWidgetRaw(::grpc::ClientContext* context, const ::IdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Widget>::Create(channel_.get(), cq, rpcmethod_GetWidget_, context, request, false);
}

::grpc::ClientReader< ::ChatMessage>* RS3::Stub::OnChatMessageRaw(::grpc::ClientContext* context, const ::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::ChatMessage>::Create(channel_.get(), rpcmethod_OnChatMessage_, context, request);
}

::grpc::ClientAsyncReader< ::ChatMessage>* RS3::Stub::AsyncOnChatMessageRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ChatMessage>::Create(channel_.get(), cq, rpcmethod_OnChatMessage_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::ChatMessage>* RS3::Stub::PrepareAsyncOnChatMessageRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::ChatMessage>::Create(channel_.get(), cq, rpcmethod_OnChatMessage_, context, request, false, nullptr);
}

::grpc::ClientReader< ::CursorActionMessage>* RS3::Stub::OnCursorActionRaw(::grpc::ClientContext* context, const ::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::CursorActionMessage>::Create(channel_.get(), rpcmethod_OnCursorAction_, context, request);
}

::grpc::ClientAsyncReader< ::CursorActionMessage>* RS3::Stub::AsyncOnCursorActionRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CursorActionMessage>::Create(channel_.get(), cq, rpcmethod_OnCursorAction_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::CursorActionMessage>* RS3::Stub::PrepareAsyncOnCursorActionRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::CursorActionMessage>::Create(channel_.get(), cq, rpcmethod_OnCursorAction_, context, request, false, nullptr);
}

::grpc::ClientReader< ::InterfaceOpenMessage>* RS3::Stub::OnInterfaceOpenRaw(::grpc::ClientContext* context, const ::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::InterfaceOpenMessage>::Create(channel_.get(), rpcmethod_OnInterfaceOpen_, context, request);
}

::grpc::ClientAsyncReader< ::InterfaceOpenMessage>* RS3::Stub::AsyncOnInterfaceOpenRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::InterfaceOpenMessage>::Create(channel_.get(), cq, rpcmethod_OnInterfaceOpen_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::InterfaceOpenMessage>* RS3::Stub::PrepareAsyncOnInterfaceOpenRaw(::grpc::ClientContext* context, const ::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::InterfaceOpenMessage>::Create(channel_.get(), cq, rpcmethod_OnInterfaceOpen_, context, request, false, nullptr);
}

RS3::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::EntityRequest, ::EntitiesResponse>(
          std::mem_fn(&RS3::Service::FindEntities), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::InteractRequest, ::Empty>(
          std::mem_fn(&RS3::Service::Interact), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::Location, ::Empty>(
          std::mem_fn(&RS3::Service::MoveTo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::InventoryTypeRequest, ::Inventory>(
          std::mem_fn(&RS3::Service::GetInventory), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::UIAction, ::Empty>(
          std::mem_fn(&RS3::Service::DoUIAction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::UIAction, ::Empty>(
          std::mem_fn(&RS3::Service::DoItemInterfaceAction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::ItemAction, ::Empty>(
          std::mem_fn(&RS3::Service::BackpackItemAction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::IdRequest, ::PropertyValue>(
          std::mem_fn(&RS3::Service::GetProperty), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::IdRequest, ::BoolResponse>(
          std::mem_fn(&RS3::Service::IsUIWidgetVisible), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::Empty, ::Entity>(
          std::mem_fn(&RS3::Service::GetControlledPlayer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RS3::Service, ::IdRequest, ::Widget>(
          std::mem_fn(&RS3::Service::GetWidget), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RS3::Service, ::Empty, ::ChatMessage>(
          std::mem_fn(&RS3::Service::OnChatMessage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[12],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RS3::Service, ::Empty, ::CursorActionMessage>(
          std::mem_fn(&RS3::Service::OnCursorAction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RS3_method_names[13],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RS3::Service, ::Empty, ::InterfaceOpenMessage>(
          std::mem_fn(&RS3::Service::OnInterfaceOpen), this)));
}

RS3::Service::~Service() {
}

::grpc::Status RS3::Service::FindEntities(::grpc::ServerContext* context, const ::EntityRequest* request, ::EntitiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::Interact(::grpc::ServerContext* context, const ::InteractRequest* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::MoveTo(::grpc::ServerContext* context, const ::Location* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::GetInventory(::grpc::ServerContext* context, const ::InventoryTypeRequest* request, ::Inventory* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::DoUIAction(::grpc::ServerContext* context, const ::UIAction* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::DoItemInterfaceAction(::grpc::ServerContext* context, const ::UIAction* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::BackpackItemAction(::grpc::ServerContext* context, const ::ItemAction* request, ::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::GetProperty(::grpc::ServerContext* context, const ::IdRequest* request, ::PropertyValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::IsUIWidgetVisible(::grpc::ServerContext* context, const ::IdRequest* request, ::BoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::GetControlledPlayer(::grpc::ServerContext* context, const ::Empty* request, ::Entity* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::GetWidget(::grpc::ServerContext* context, const ::IdRequest* request, ::Widget* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::OnChatMessage(::grpc::ServerContext* context, const ::Empty* request, ::grpc::ServerWriter< ::ChatMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::OnCursorAction(::grpc::ServerContext* context, const ::Empty* request, ::grpc::ServerWriter< ::CursorActionMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RS3::Service::OnInterfaceOpen(::grpc::ServerContext* context, const ::Empty* request, ::grpc::ServerWriter< ::InterfaceOpenMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


